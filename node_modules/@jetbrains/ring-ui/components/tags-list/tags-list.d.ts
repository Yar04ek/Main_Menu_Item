import { Component, ComponentType, HTMLAttributes, ReactNode } from 'react';
import * as React from 'react';
import { TagAttrs } from '../tag/tag';
declare function noop(): void;
export interface TagType extends Omit<TagAttrs, 'onClick' | 'children'> {
    label?: ReactNode;
    key?: string | number | null | undefined;
}
export interface TagsListProps<T extends TagType> extends HTMLAttributes<HTMLElement> {
    tags: readonly T[];
    customTagComponent: ComponentType<TagAttrs>;
    canNotBeEmpty: boolean;
    disabled: boolean;
    handleClick: (tag: T) => (e: React.MouseEvent<HTMLElement>) => void;
    handleRemove: (tag: T) => (e: React.MouseEvent<HTMLElement>) => void;
    activeIndex?: number | null | undefined;
    tagClassName?: string | null | undefined;
}
/**
 * @name Tags List
 */
export default class TagsList<T extends TagType> extends Component<TagsListProps<T>> {
    static defaultProps: {
        customTagComponent: null;
        canNotBeEmpty: boolean;
        disabled: boolean;
        handleClick: () => typeof noop;
        handleRemove: () => typeof noop;
    };
    renderTag(tag: T, focusTag: boolean): import("react/jsx-runtime").JSX.Element;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type TagsListAttrs<T extends TagType = TagType> = React.JSX.LibraryManagedAttributes<typeof TagsList, TagsListProps<T>>;
export {};
