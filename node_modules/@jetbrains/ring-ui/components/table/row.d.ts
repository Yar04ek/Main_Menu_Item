import { HTMLAttributes, PureComponent } from 'react';
import * as React from 'react';
import { FocusSensorAddProps } from '../global/focus-sensor-hoc';
import { Column } from './header-cell';
import { SelectionItem } from './selection';
export interface RowProps<T extends SelectionItem> extends Omit<HTMLAttributes<HTMLTableRowElement>, 'onClick' | 'onDoubleClick' | 'onSelect'>, FocusSensorAddProps<HTMLTableRowElement> {
    item: T;
    columns: readonly Column<T>[] | ((item: T) => readonly Column<T>[]);
    selectable: boolean;
    showFocus: boolean;
    draggable: boolean;
    alwaysShowDragHandle: boolean;
    dragHandleTitle?: string;
    selected: boolean;
    onHover: (item: T, e: React.MouseEvent<HTMLTableRowElement>) => void;
    onSelect: (item: T, selected: boolean) => void;
    onDoubleClick: (item: T) => void;
    onClick: (item: T, e: React.MouseEvent<HTMLTableRowElement>) => void;
    level: number;
    collapsible: boolean;
    parentCollapsible: boolean;
    collapsed: boolean;
    onCollapse: (item: T) => void;
    onExpand: (item: T) => void;
    showDisabledSelection?: boolean | null | undefined;
    checkboxTooltip?: string | undefined;
    autofocus?: boolean | null | undefined;
    'data-test'?: string | null | undefined;
    metaColumnClassName?: string | null | undefined;
}
export default class Row<T extends SelectionItem> extends PureComponent<RowProps<T>> {
    static defaultProps: {
        selectable: boolean;
        showFocus: boolean;
        draggable: boolean;
        alwaysShowDragHandle: boolean;
        selected: boolean;
        onHover: () => void;
        onSelect: () => void;
        onDoubleClick: () => void;
        onClick: () => void;
        level: number;
        collapsible: boolean;
        parentCollapsible: boolean;
        collapsed: boolean;
        onCollapse: () => void;
        onExpand: () => void;
    };
    id: string;
    onMouseEnter: (e: React.MouseEvent<HTMLTableRowElement>) => void;
    onClick: (e: React.MouseEvent<HTMLTableRowElement>) => void;
    onCheckboxFocus: () => void;
    onCheckboxChange: () => void;
    toggleSelection(): void;
    onDoubleClick: () => void;
    row?: HTMLElement | null;
    rowRef: (el: HTMLElement | null) => void;
    composedRowRef: import("memoize-one").MemoizedFn<(...refs: (React.Ref<HTMLElement> | undefined)[]) => (value: HTMLElement | null) => void>;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type RowAttrs<T extends SelectionItem> = React.JSX.LibraryManagedAttributes<typeof Row, RowProps<T>>;
