import { createElement as _createElement } from "react";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * @name Table
 */
import { Component, PureComponent } from 'react';
import classNames from 'classnames';
import { arrayMove, List } from 'react-movable';
import focusSensorHOC from '../global/focus-sensor-hoc';
import getUID from '../global/get-uid';
import Shortcuts from '../shortcuts/shortcuts';
import Loader from '../loader/loader';
import Header from './header';
import style from './table.css';
import selectionShortcutsHOC from './selection-shortcuts-hoc';
import disableHoverHOC from './disable-hover-hoc';
import Row from './row-with-focus-sensor';
/**
 * Interactive table with selection and keyboard navigation support.
 */
export class Table extends PureComponent {
    static defaultProps = {
        isItemSelectable: () => true,
        loading: false,
        onSort: () => { },
        onReorder: () => { },
        getItemKey: (item) => item.id,
        sortKey: 'id',
        sortOrder: true,
        draggable: false,
        alwaysShowDragHandle: false,
        stickyHeader: true,
        getItemLevel: () => 0,
        getItemClassName: () => null,
        getMetaColumnClassName: () => null,
        getItemDataTest: () => null,
        isItemCollapsible: () => false,
        isParentCollapsible: () => false,
        isItemCollapsed: () => false,
        onItemCollapse: () => { },
        onItemExpand: () => { },
        onItemDoubleClick: () => { },
        onItemClick: () => { },
        remoteSelection: false,
        isDisabledSelectionVisible: () => false,
        getCheckboxTooltip: () => undefined,
        RowComponent: Row,
        wideFirstColumn: false,
    };
    state = {
        shortcutsScope: getUID('ring-table-'),
        userSelectNone: false,
    };
    componentDidMount() {
        document.addEventListener('mouseup', this.onMouseUp);
    }
    componentDidUpdate({ data, selection, onSelect, selectable, remoteSelection }) {
        if (data !== this.props.data && remoteSelection) {
            onSelect(selection.cloneWith({ data: this.props.data }));
        }
        if (!this.props.selectable && this.props.selectable !== selectable) {
            onSelect(selection.resetSelection());
        }
    }
    componentWillUnmount() {
        document.removeEventListener('mouseup', this.onMouseUp);
    }
    onMouseDown = (e) => {
        if (e.shiftKey) {
            this.setState({ userSelectNone: true });
        }
    };
    onMouseUp = () => {
        if (this.state.userSelectNone) {
            this.setState({ userSelectNone: false });
        }
    };
    onRowFocus = (row) => {
        const { selection, onSelect } = this.props;
        onSelect(selection.focus(row));
    };
    onRowSelect = (row, selected) => {
        const { selection, onSelect } = this.props;
        if (selected) {
            onSelect(selection.select(row));
        }
        else {
            onSelect(selection.deselect(row));
        }
    };
    onSortEnd = ({ oldIndex, newIndex }) => {
        const data = arrayMove(this.props.data, oldIndex, newIndex);
        this.props.onReorder({ data, oldIndex, newIndex });
    };
    onCheckboxChange = (e) => {
        const { checked } = e.currentTarget;
        const { selection, onSelect } = this.props;
        if (checked) {
            onSelect(selection.selectAll());
        }
        else {
            onSelect(selection.reset());
        }
        this.restoreFocusWithoutScroll();
    };
    restoreFocusWithoutScroll = () => {
        const { scrollX, scrollY } = window;
        this.props.onFocusRestore();
        window.scrollTo(scrollX, scrollY);
    };
    render() {
        const { data, selection, columns, caption, getItemKey, selectable, focused, isItemSelectable, getItemLevel, getItemClassName, getMetaColumnClassName, getItemDataTest, draggable, alwaysShowDragHandle, dragHandleTitle, loading, onSort, sortKey, sortOrder, loaderClassName, stickyHeader, stickyHeaderOffset, isItemCollapsible, isParentCollapsible, isItemCollapsed, onItemCollapse, onItemExpand, isDisabledSelectionVisible, getCheckboxTooltip, onItemDoubleClick, onItemClick, renderEmpty, RowComponent, customLoader, } = this.props;
        // NOTE: Do not construct new object per render because it causes all rows rerendering
        const columnsArray = typeof columns === 'function' ? columns(null) : columns;
        const headerProps = {
            caption,
            selectable,
            draggable,
            columns: columnsArray,
            onSort,
            sortKey,
            sortOrder,
            sticky: stickyHeader,
            topStickOffset: stickyHeaderOffset,
        };
        const selectedSize = selection.getSelected().size;
        const allSelectedSize = selection.selectAll().getSelected().size;
        headerProps.checked = selectedSize > 0 && selectedSize === allSelectedSize;
        headerProps.onCheckboxChange = this.onCheckboxChange;
        headerProps.checkboxDisabled = this.props.data.length === 0;
        const wrapperClasses = classNames({
            [style.tableWrapper]: true,
            [style.loading]: loading,
        });
        const classes = classNames(this.props.className, {
            [style.table]: true,
            [style.wideFirstColumn]: this.props.wideFirstColumn,
            [style.multiSelection]: selection.getSelected().size > 0,
            [style.userSelectNone]: this.state.userSelectNone,
            [style.disabledHover]: this.props.disabledHover,
        });
        const renderList = ({ children, props }) => {
            const empty = (_jsx("tr", { children: _jsx("td", { colSpan: columnsArray.length || 1, className: style.tableMessage, children: renderEmpty ? renderEmpty() : null }) }));
            const tbody = Array.isArray(children) && children.length > 0 ? children : empty;
            return (_jsxs("table", { className: classes, "data-test": "ring-table", children: [_jsx(Header, { ...headerProps }), _jsx("tbody", { ...props, "data-test": "ring-table-body", children: tbody })] }));
        };
        const renderItem = ({ value, props = {}, isDragged }) => {
            if (value == null) {
                return null;
            }
            const { ref, ...restProps } = props;
            const row = (_createElement(RowComponent, { innerRef: ref, level: getItemLevel(value), item: value, showFocus: selection.isFocused(value), autofocus: selection.isFocused(value), focused: focused && selection.isFocused(value), selectable: selectable && isItemSelectable(value), selected: selectable && selection.isSelected(value), onFocus: this.onRowFocus, onSelect: this.onRowSelect, onDoubleClick: onItemDoubleClick, onClick: onItemClick, collapsible: isItemCollapsible(value), parentCollapsible: isParentCollapsible(value), collapsed: isItemCollapsed(value), onCollapse: onItemCollapse, onExpand: onItemExpand, showDisabledSelection: isDisabledSelectionVisible(value), checkboxTooltip: getCheckboxTooltip(value), className: classNames(getItemClassName(value), { [style.draggingRow]: isDragged }), metaColumnClassName: getMetaColumnClassName(value), draggable: draggable, alwaysShowDragHandle: alwaysShowDragHandle, dragHandleTitle: dragHandleTitle, columns: columns, "data-test": getItemDataTest(value), ...restProps, key: restProps.key ?? getItemKey(value) }));
            return isDragged ? (_jsx("table", { style: { ...props.style }, className: style.draggingTable, children: _jsx("tbody", { children: row }) })) : (row);
        };
        return (_jsxs("div", { className: wrapperClasses, "data-test": "ring-table-wrapper", ref: this.props.innerRef, children: [focused && _jsx(Shortcuts, { map: this.props.shortcutsMap, scope: this.state.shortcutsScope }), _jsx("div", { role: "presentation", onMouseDown: this.onMouseDown, children: draggable ? (_jsx(List, { values: data, renderList: renderList, renderItem: renderItem, onChange: this.onSortEnd })) : (renderList({ children: data.map((value, index) => renderItem({ value, index })) })) }), loading && (_jsx("div", { className: style.loadingOverlay, children: customLoader ? customLoader(loaderClassName) : _jsx(Loader, { className: loaderClassName }) }))] }));
    }
}
const getContainer = () => disableHoverHOC(selectionShortcutsHOC(focusSensorHOC(Table)));
// eslint-disable-next-line react/no-multi-comp
export default class TableContainer extends Component {
    // https://stackoverflow.com/a/53882322/6304152
    Table = getContainer();
    render() {
        return _jsx(this.Table, { ...this.props });
    }
}
