export interface SelectionItem {
    id: string | number;
}
export interface TableSelectionConfig<T extends SelectionItem> {
    data?: readonly T[] | undefined;
    selected?: Set<T> | undefined;
    focused?: T | null | undefined;
    getKey?: ((item: T) => string | number) | undefined;
    isItemSelectable?: ((item: T) => boolean | undefined) | undefined;
    getChildren?: ((item: T) => readonly T[]) | undefined;
}
export interface CloneWithConfig<T> {
    data?: readonly T[] | null | undefined;
    selected?: Set<T> | readonly T[] | null | undefined;
    focused?: T | null | undefined;
}
export default class Selection<T extends SelectionItem> {
    private _rawData;
    protected _getChildren: (item: T) => readonly T[];
    protected _data: Set<T>;
    protected _selected: Set<T>;
    protected _focused: T | null;
    private _getKey;
    protected _isItemSelectable: (item: T) => boolean | undefined;
    constructor({ data, selected, focused, getKey, getChildren, isItemSelectable, }?: TableSelectionConfig<T>);
    protected _buildData(data: readonly T[] | null | undefined): Set<T>;
    protected _buildSelected(data: Set<T>, selected: Set<T>): Set<T>;
    cloneWith({ data, selected, focused }: CloneWithConfig<T>): Selection<T>;
    focus(value: T | null | undefined): Selection<T>;
    moveUp(): Selection<T> | undefined;
    moveDown(): Selection<T> | undefined;
    moveStart(): Selection<T> | undefined;
    moveEnd(): Selection<T> | undefined;
    select(value?: T | null): Selection<T>;
    deselect(value?: T | null): Selection<T>;
    toggleSelection(value?: T | null): Selection<T>;
    selectAll(): Selection<T>;
    resetFocus(): Selection<T>;
    resetSelection(): Selection<T>;
    reset(): Selection<T>;
    isFocused(value: T | null): boolean;
    isSelected(value: T | null): boolean;
    getFocused(): T | null;
    getSelected(): Set<T>;
    getActive(): Set<T>;
}
