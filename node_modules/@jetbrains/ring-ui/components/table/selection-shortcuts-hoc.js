import { jsx as _jsx } from "react/jsx-runtime";
import { PureComponent } from 'react';
export default function selectionShortcutsHOC(ComposedComponent) {
    class SelectionShortcuts extends PureComponent {
        onUpPress = () => {
            const { selection, onSelect } = this.props;
            const newSelection = selection.moveUp();
            if (newSelection) {
                onSelect?.(newSelection);
            }
            return false;
        };
        onDownPress = () => {
            const { selection, onSelect } = this.props;
            const newSelection = selection.moveDown();
            if (newSelection) {
                onSelect?.(newSelection);
            }
            return false;
        };
        shiftSelectionMode;
        onShiftKeyDown = () => {
            const { selection } = this.props;
            if (selection.isSelected(selection.getFocused())) {
                this.shiftSelectionMode = 'deletion';
            }
            else {
                this.shiftSelectionMode = 'addition';
            }
        };
        shiftSelect = (selection) => {
            if (this.shiftSelectionMode === 'addition') {
                return selection.select();
            }
            else {
                return selection.deselect();
            }
        };
        onShiftUpPress = (e) => {
            e.preventDefault();
            const { selectable, selection, onSelect } = this.props;
            if (!selectable) {
                return;
            }
            const newSelection = this.shiftSelect(selection);
            const newMovedSelection = newSelection.moveUp();
            if (newMovedSelection) {
                onSelect?.(newMovedSelection);
            }
            else {
                onSelect?.(newSelection);
            }
        };
        onShiftDownPress = (e) => {
            e.preventDefault();
            const { selectable, selection, onSelect } = this.props;
            if (!selectable) {
                return;
            }
            const newSelection = this.shiftSelect(selection);
            const newMovedSelection = newSelection.moveDown();
            if (newMovedSelection) {
                onSelect?.(newMovedSelection);
            }
            else {
                onSelect?.(newSelection);
            }
        };
        onHomePress = () => {
            const { selection, onSelect } = this.props;
            const newSelection = selection.moveStart();
            if (newSelection) {
                onSelect?.(newSelection);
            }
            return false;
        };
        onEndPress = () => {
            const { selection, onSelect } = this.props;
            const newSelection = selection.moveEnd();
            if (newSelection) {
                onSelect?.(newSelection);
            }
            return false;
        };
        onSpacePress = () => {
            const { selectable, selection, onSelect } = this.props;
            if (!selectable) {
                return true;
            }
            onSelect?.(selection.toggleSelection());
            return false;
        };
        onEscPress = () => {
            const { selection, onSelect } = this.props;
            onSelect?.(selection.reset());
            //this.restoreFocusWithoutScroll();
        };
        onCmdAPress = () => {
            const { selectable, selection, onSelect } = this.props;
            if (!selectable) {
                return true;
            }
            onSelect?.(selection.selectAll());
            return false;
        };
        shortcutsMap = {
            up: this.onUpPress,
            down: this.onDownPress,
            shift: this.onShiftKeyDown,
            'shift+up': this.onShiftUpPress,
            'shift+down': this.onShiftDownPress,
            home: this.onHomePress,
            end: this.onEndPress,
            space: this.onSpacePress,
            esc: this.onEscPress,
            'command+a': this.onCmdAPress,
            'ctrl+a': this.onCmdAPress,
        };
        render() {
            const { selection, selectable, onSelect, shortcuts, ...restProps } = this.props;
            return (_jsx(ComposedComponent, { ...restProps, selection: selection, selectable: selectable, onSelect: onSelect, shortcutsMap: { ...this.shortcutsMap, ...this.props.shortcuts } }));
        }
    }
    SelectionShortcuts.defaultProps = {
        ...ComposedComponent.defaultProps,
        selectable: true,
        onSelect: () => { },
        shortcuts: {},
    };
    return SelectionShortcuts;
}
