/**
 * @description Displays a popup with select's options.
 */
import { ComponentType, CSSProperties, PureComponent, ReactNode, Ref, SyntheticEvent } from 'react';
import * as React from 'react';
import { IconType } from '../icon/icon';
import Popup from '../popup/popup';
import { Directions } from '../popup/position';
import List, { SelectHandlerParams } from '../list/list';
import Caret from '../caret/caret';
import { ListDataItem } from '../list/consts';
import { ShortcutsMap } from '../shortcuts/core';
import { TagAttrs } from '../tag/tag';
import { SelectItem } from './select';
export type FilterFn<T> = (itemToCheck: SelectItem<T>, checkString: string, data: readonly SelectItem<T>[]) => boolean;
export interface Filter<T = unknown> {
    fn?: FilterFn<T> | null | undefined;
    fuzzy?: boolean | null | undefined;
    value?: string | null | undefined;
    placeholder?: string | undefined;
}
export interface Multiple {
    label?: string | null | undefined;
    limit?: number | null | undefined;
    selectAll?: boolean | null | undefined;
    renderSelectedItemsDescription?: (selectedItems: SelectItem[], total: number) => ReactNode;
    selectAllLabel?: string;
    deselectAllLabel?: string;
    removeSelectedItems?: boolean | null | undefined;
}
export interface TagsReset {
    separator?: boolean | null | undefined;
    label?: string | number | null | undefined;
    glyph?: IconType | string | null | undefined;
}
export interface Tags {
    reset?: TagsReset | null | undefined;
    customTagComponent?: (tag: TagAttrs) => ReactNode;
}
export interface SelectPopupProps<T = unknown> {
    data: readonly ListDataItem<T>[];
    activeIndex: number | null;
    toolbar: ReactNode;
    topbar: ReactNode;
    filter: boolean | Filter<T>;
    filterIcon?: string | ComponentType | null | undefined;
    filterRef?: Ref<HTMLInputElement>;
    message: string | null;
    anchorElement: HTMLElement | null;
    maxHeight: number;
    minWidth: number;
    loading: boolean;
    onSelect: (item: ListDataItem<T>, event: Event, params?: SelectHandlerParams) => void;
    onCloseAttempt: (e?: Event | SyntheticEvent, isEsc?: boolean | undefined) => void;
    onOutsideClick: (e: PointerEvent) => void;
    onFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onClear: (e: React.MouseEvent<HTMLButtonElement>) => void;
    onLoadMore: () => void;
    ringPopupTarget: string | null;
    onSelectAll: (isSelectAll: boolean) => void;
    onEmptyPopupEnter: (e: KeyboardEvent) => void;
    className?: string | null | undefined;
    compact?: boolean | null | undefined;
    dir?: 'ltr' | 'rtl' | undefined;
    directions?: readonly Directions[] | undefined;
    disabled?: boolean | undefined;
    disableMoveOverflow?: boolean | null | undefined;
    disableScrollToActive?: boolean | null | undefined;
    filterValue?: string | undefined;
    hidden?: boolean | null | undefined;
    isInputMode?: boolean | undefined;
    listId?: string | undefined;
    left?: number | undefined;
    renderOptimization?: boolean | undefined;
    style?: CSSProperties | undefined;
    top?: number | undefined;
    offset?: number | undefined;
    multiple: boolean | Multiple;
    selected: ListDataItem<T> | readonly ListDataItem<T>[] | null;
    tags: Tags | boolean | null;
    preventListOverscroll?: boolean | undefined;
}
export default class SelectPopup<T = unknown> extends PureComponent<SelectPopupProps<T>> {
    static defaultProps: SelectPopupProps;
    state: {
        popupFilterShortcutsOptions: {
            modal: boolean;
            disabled: boolean;
        };
        tagsActiveIndex: null;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    isClickingPopup: boolean;
    filter?: HTMLInputElement | null;
    focusFilter(): void;
    isEventTargetFilter(event: Event): boolean;
    caret?: Caret | null;
    handleNavigation(event: Event, navigateLeft?: boolean): void;
    removeTag(tag?: ListDataItem<T>, event?: SyntheticEvent): void;
    removeSelectedTag(): boolean;
    handleBackspace(event: Event): boolean;
    onFilterFocus: () => void;
    popupFilterOnBlur: () => void;
    private _togglePopupFilterShortcuts;
    mouseDownHandler: () => void;
    mouseUpHandler: () => void;
    popup?: Popup | null;
    isVisible(): boolean | null | undefined;
    onListSelect: (selected: ListDataItem<T>, event?: Event | SyntheticEvent, opts?: SelectHandlerParams) => void;
    tabPress: (event: Event) => void;
    onClickHandler: () => void | undefined;
    getFilter(): import("react/jsx-runtime").JSX.Element | null;
    handleRemoveTag: (arg: ListDataItem<T>) => (event: SyntheticEvent) => void;
    handleTagClick: (arg: ListDataItem<T>) => () => void;
    getCustomTag(tags: Tags | boolean | null): ((tag: TagAttrs) => ReactNode) | undefined;
    getTags(): false | import("react/jsx-runtime").JSX.Element;
    getFilterWithTags(): import("react/jsx-runtime").JSX.Element | null;
    getBottomLine(): "" | import("react/jsx-runtime").JSX.Element | null;
    handleListResize: () => void;
    getList(ringPopupTarget: string | Element | undefined): import("react/jsx-runtime").JSX.Element | null;
    handleSelectAll: () => void;
    getSelectAll: () => false | import("react/jsx-runtime").JSX.Element;
    private _adjustListMaxHeight;
    popupRef: (el: Popup | null) => void;
    list?: List<T> | null;
    listRef: (el: List<T> | null) => void;
    filterRef: (el: HTMLInputElement | null) => void;
    composedFilterRef: import("memoize-one").MemoizedFn<(...refs: (Ref<HTMLInputElement> | undefined)[]) => (value: HTMLInputElement | null) => void>;
    shortcutsScope: string;
    shortcutsMap: {
        tab: (event: Event) => void;
    };
    popupFilterShortcutsMap: ShortcutsMap;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type SelectPopupAttrs<T = unknown> = React.JSX.LibraryManagedAttributes<typeof SelectPopup, SelectPopupProps<T>>;
