import { ButtonHTMLAttributes, Component, ComponentType, CSSProperties, HTMLAttributes, ReactNode, Ref, RefCallback, SyntheticEvent } from 'react';
import * as React from 'react';
import { SelectHandlerParams } from '../list/list';
import { Size } from '../input/input';
import { LabelType } from '../control-label/control-label';
import { ListDataItem } from '../list/consts';
import { Directions } from '../popup/popup.consts';
import { ControlsHeight } from '../global/controls-height';
import SelectPopup, { Filter, FilterFn, Multiple, Tags } from './select__popup';
/**
 * @name Select
 */
declare function noop(): void;
/**
 * @enum {number}
 */
export declare enum Type {
    BUTTON = "BUTTON",
    INPUT = "INPUT",
    CUSTOM = "CUSTOM",
    INLINE = "INLINE",
    INPUT_WITHOUT_CONTROLS = "INPUT_WITHOUT_CONTROLS"
}
type SelectItemData<T> = T & {
    key: string | number;
    isResetItem?: boolean | null | undefined;
    separator?: boolean | null | undefined;
};
export type SelectItem<T = unknown> = ListDataItem<SelectItemData<T>>;
declare function getLowerCaseLabel<T>(item: SelectItem<T>): string | null;
declare function doesLabelMatch<T>(itemToCheck: SelectItem<T>, fn: (label: string) => boolean): boolean;
export interface Add {
    alwaysVisible?: boolean | null | undefined;
    regexp?: RegExp | null | undefined;
    minlength?: number | null | undefined;
    label?: ((filterString: string) => string) | string | null | undefined;
    prefix?: string | null | undefined;
    delayed?: boolean | null | undefined;
}
export interface DataTestProps {
    'data-test'?: string | null | undefined;
}
export interface CustomAnchorProps {
    wrapperProps: HTMLAttributes<HTMLElement> & DataTestProps & {
        ref: RefCallback<HTMLElement>;
    };
    buttonProps: Pick<ButtonHTMLAttributes<HTMLButtonElement>, 'id' | 'disabled' | 'children'> & {
        onClick: () => void;
    } & DataTestProps;
    popup: ReactNode;
}
export type CustomAnchor = (props: CustomAnchorProps) => ReactNode;
export interface BaseSelectProps<T = unknown> {
    data: readonly SelectItem<T>[];
    filter: boolean | Filter<T>;
    filterIcon?: string | ComponentType | null | undefined;
    filterRef?: Ref<HTMLInputElement>;
    clear: boolean;
    loading: boolean;
    disabled: boolean;
    loadingMessage?: string;
    notFoundMessage?: string;
    type: Type;
    size: Size;
    hideSelected: boolean;
    allowAny: boolean;
    maxHeight: number;
    hideArrow: boolean;
    showPopup: boolean;
    directions: readonly Directions[];
    label: string | null;
    selectedLabel: ReactNode;
    labelType?: LabelType;
    inputPlaceholder: string;
    shortcutsEnabled: boolean;
    tryKeepOpen?: boolean;
    onBeforeOpen: () => void;
    onLoadMore: () => void;
    onOpen: () => void;
    onFilter: (value: string) => void;
    onFocus: (e: React.FocusEvent<HTMLInputElement>) => void;
    onBlur: () => void;
    onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;
    onSelect: (selected: SelectItem<T> | null, event?: Event | SyntheticEvent) => void;
    onDeselect: (selected: SelectItem<T> | null) => void;
    onOutsideClick: (e: PointerEvent) => void;
    onAdd: (value: string) => void;
    onDone: () => void;
    onReset: () => void;
    dir: 'ltr' | 'rtl';
    renderBottomToolbar?: () => ReactNode;
    renderTopToolbar?: () => ReactNode;
    height?: ControlsHeight | undefined;
    targetElement?: HTMLElement | null | undefined;
    className?: string | null | undefined;
    buttonClassName?: string | null | undefined;
    id?: string | undefined;
    getInitial?: (() => string) | null | undefined;
    minWidth?: number | undefined;
    popupClassName?: string | null | undefined;
    popupStyle?: CSSProperties | undefined;
    top?: number | undefined;
    left?: number | undefined;
    offset?: number | undefined;
    renderOptimization?: boolean | undefined;
    ringPopupTarget?: string | null | undefined;
    preventListOverscroll?: boolean | undefined;
    error?: ReactNode | null | undefined;
    hint?: ReactNode;
    add?: Add | null | undefined;
    compact?: boolean | null | undefined;
    customAnchor?: CustomAnchor | null | undefined;
    disableMoveOverflow?: boolean | null | undefined;
    disableScrollToActive?: boolean | null | undefined;
    'data-test'?: string | null | undefined;
}
export interface SingleSelectProps<T = unknown> extends BaseSelectProps<T> {
    multiple: false;
    onClose: (selected: SelectItem<T> | null) => void;
    onChange: (selected: SelectItem<T> | null, event?: Event | SyntheticEvent) => void;
    selected?: SelectItem<T> | null | undefined;
    tags?: null | undefined;
}
export interface MultipleSelectProps<T = unknown> extends BaseSelectProps<T> {
    multiple: true | Multiple;
    selected: readonly SelectItem<T>[];
    onClose: (selected: SelectItem<T>[]) => void;
    onChange: (selected: SelectItem<T>[], event?: Event | SyntheticEvent) => void;
    tags?: Tags | boolean | null | undefined;
}
export type SelectProps<T = unknown> = SingleSelectProps<T> | MultipleSelectProps<T>;
interface AddButton {
    prefix: string | null | undefined;
    label: string;
    delayed: boolean;
}
export interface SelectState<T = unknown> {
    data: SelectItem<T>[];
    shownData: SelectItem<T>[];
    selected: SelectItem<T> | SelectItem<T>[] | null | undefined;
    selectedIndex: number | null;
    filterValue: string;
    shortcutsEnabled: boolean;
    popupShortcuts: boolean;
    showPopup: boolean;
    prevData: readonly SelectItem<T>[];
    prevSelected: SelectItem<T> | readonly SelectItem<T>[] | null | undefined;
    prevMultiple: Multiple | boolean | null | undefined;
    multipleMap: Record<string, boolean>;
    addButton: AddButton | null;
    focused?: boolean;
}
/**
 * @name Select
 * @constructor
 * @extends {Component}
 */
/**
 * Displays a select.
 */
export default class Select<T = unknown> extends Component<SelectProps<T>, SelectState<T>> {
    static defaultProps: {
        data: never[];
        filter: boolean;
        filterIcon: null;
        filterRef: typeof noop;
        multiple: boolean;
        clear: boolean;
        loading: boolean;
        disabled: boolean;
        type: Type;
        size: Size;
        targetElement: null;
        hideSelected: boolean;
        allowAny: boolean;
        hideArrow: boolean;
        showPopup: boolean;
        maxHeight: number;
        directions: Directions[];
        selected: null;
        label: null;
        selectedLabel: null;
        inputPlaceholder: string;
        hint: null;
        shortcutsEnabled: boolean;
        onBeforeOpen: typeof noop;
        onLoadMore: typeof noop;
        onOpen: typeof noop;
        onClose: typeof noop;
        onFilter: typeof noop;
        onFocus: typeof noop;
        onBlur: typeof noop;
        onKeyDown: typeof noop;
        onSelect: typeof noop;
        onDeselect: typeof noop;
        onOutsideClick: typeof noop;
        onChange: typeof noop;
        onAdd: typeof noop;
        onDone: typeof noop;
        onReset: typeof noop;
        tags: null;
        ringPopupTarget: null;
        dir: string;
        offset: number;
    };
    static getDerivedStateFromProps<T = unknown>(nextProps: SelectProps<T>, prevState: SelectState<T>): Partial<SelectState<T>>;
    state: SelectState<T>;
    componentDidUpdate(prevProps: SelectProps<T>, prevState: SelectState<T>): void;
    static contextType: React.Context<ControlsHeight>;
    static Type: typeof Type;
    static Size: typeof Size;
    id: string;
    shortcutsScope: string;
    listId: string;
    private _focusHandler;
    isClickingSelect: boolean;
    mouseDownHandler: () => void;
    mouseUpHandler: () => void;
    private _blurHandler;
    node?: HTMLElement | null;
    nodeRef: (el: HTMLElement | null) => void;
    _popup: SelectPopup<SelectItemData<T>> | null;
    onEmptyPopupEnter: () => void;
    focus: () => void;
    private _onEnter;
    private _onEsc;
    _inputShortcutHandler: () => void;
    getValueForFilter(selected: SelectItem<T> | readonly SelectItem<T>[] | null | undefined): string;
    _getSelectedIndex(selected: SelectItem<T> | readonly SelectItem<T>[] | null | undefined, data: readonly SelectItem<T>[]): number | null;
    popupRef: (el: SelectPopup<SelectItemData<T>> | null) => void;
    _getResetOption(): SelectItem<T> | null;
    _prependResetOption(shownData: SelectItem<T>[]): SelectItem<T>[];
    private _renderPopup;
    _showPopup: () => void;
    _hidePopup: (tryFocusAnchor?: boolean) => void;
    addHandler: () => void;
    getToolbar(): import("react/jsx-runtime").JSX.Element | null;
    getTopbar(): ReactNode;
    getLowerCaseLabel: typeof getLowerCaseLabel;
    doesLabelMatch: typeof doesLabelMatch;
    getFilterFn(): FilterFn<T>;
    getListItems(rawFilterString: string, data?: SelectItem<T>[]): SelectItem<T>[];
    filterValue(): string;
    filterValue(setValue: string): void;
    isInputMode(): boolean;
    _clickHandler: () => void;
    _openPopupIfClosed: () => void;
    _filterChangeHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;
    private _setFilter;
    private _rebuildMultipleMap;
    _redrawPopup: () => void;
    _listSelectHandler: (selected: SelectItem<T>, event?: Event, opts?: SelectHandlerParams) => void;
    _listSelectAllHandler: (isSelectAll?: boolean) => void;
    private _onCloseAttempt;
    clearFilter: (e?: SyntheticEvent) => void;
    clear: (event?: Event | SyntheticEvent) => boolean;
    _selectionIsEmpty(): boolean;
    private _getLabel;
    private _getPlaceholder;
    _getSelectedString(): string | null;
    private _getIcons;
    private _getAvatar;
    filter?: HTMLInputElement | null;
    filterRef: (el: HTMLInputElement | null) => void;
    composedFilterRef: import("memoize-one").MemoizedFn<(...refs: (Ref<HTMLInputElement> | undefined)[]) => (value: HTMLInputElement | null) => void>;
    getShortcutsMap(): {
        enter: () => true | undefined;
        esc: (event: KeyboardEvent) => boolean | undefined;
        up: () => void;
        down: () => void;
        right: typeof noop;
        left: typeof noop;
        'shift+up': typeof noop;
        'shift+down': typeof noop;
        space: typeof noop;
    };
    renderSelect(activeItemId: string | undefined): import("react/jsx-runtime").JSX.Element;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type SingleSelectAttrs<T = unknown> = React.JSX.LibraryManagedAttributes<typeof Select, SingleSelectProps<T>>;
export type MultipleSelectAttrs<T = unknown> = React.JSX.LibraryManagedAttributes<typeof Select, MultipleSelectProps<T>>;
export type SelectAttrs<T = unknown> = React.JSX.LibraryManagedAttributes<typeof Select, SelectProps<T>>;
export declare const RerenderableSelect: React.ForwardRefExoticComponent<SelectProps<unknown> & React.RefAttributes<Select<unknown>>>;
export {};
