import Auth, { AuthUser } from '../auth/auth';
import HubSourceUsersGroups, { HubSourceUsersGroupsOptions, UserGroup } from '../hub-source/hub-source__users-groups';
interface ListUsersGroupsSourceOptions extends Partial<HubSourceUsersGroupsOptions> {
    GroupsTitle: string;
    NoGroupsTitle: string;
    UsersTitle: string;
    NoUsersTitle: string;
    getPluralForUserCount: (count: number) => string;
}
declare enum Filter {
    ALL = 0,
    USERS = 1,
    GROUPS = 2
}
export default class ListUsersGroupsSource extends HubSourceUsersGroups {
    static Filter: typeof Filter;
    listSourceOptions: ListUsersGroupsSourceOptions;
    constructor(auth: Auth, options?: Partial<ListUsersGroupsSourceOptions>);
    getGroupsSectionTitle(groups: UserGroup[]): string;
    getUsersSectionTitle(users: AuthUser[]): string;
    getForList(query?: string, filter?: Filter): Promise<{
        rgItemType: import("./consts").Type;
        key: number;
        description: string;
    }[]>;
}
export {};
