/**
 * @name List
 */
import { Component, ReactNode, SyntheticEvent } from 'react';
import VirtualizedList, { ListRowProps } from 'react-virtualized/dist/es/List';
import { Size } from 'react-virtualized/dist/es/AutoSizer';
import { WindowScrollerChildProps } from 'react-virtualized/dist/es/WindowScroller';
import { ShortcutsMap } from '../shortcuts/core';
import ListHint from './list__hint';
import { ListDataItem, ListDataItemProps, Type } from './consts';
export type { ListDataItem };
declare function noop(): void;
/**
 * @param {Type} listItemType
 * @param {Object} item list item
 */
declare function isItemType<T>(listItemType: Type, item: ListDataItem<T>): boolean;
export interface SelectHandlerParams {
    tryKeepOpen?: boolean;
}
export interface ListProps<T = unknown> {
    data: readonly ListDataItem<T>[];
    restoreActiveIndex: boolean;
    activateSingleItem: boolean;
    activateFirstItem: boolean;
    onMouseOut: (e: SyntheticEvent<HTMLElement>) => void;
    onSelect: (item: ListDataItem<T>, event: Event | SyntheticEvent, params?: SelectHandlerParams) => void;
    onScrollToBottom: () => void;
    onResize: (info: Size) => void;
    shortcuts: boolean;
    shortcutsMap?: ShortcutsMap;
    renderOptimization: boolean;
    disableMoveDownOverflow: boolean;
    ariaLabel: string;
    id?: string | undefined;
    className?: string | null | undefined;
    hint?: ReactNode;
    hintOnSelection?: string | null | undefined;
    maxHeight?: number | null | undefined;
    activeIndex?: number | null | undefined;
    useMouseUp?: boolean | null | undefined;
    visible?: boolean | null | undefined;
    disableMoveOverflow?: boolean | null | undefined;
    compact?: boolean | null | undefined;
    disableScrollToActive?: boolean | null | undefined;
    hidden?: boolean | null | undefined;
    preventListOverscroll?: boolean | undefined;
}
export declare const ActiveItemContext: {
    ValueContext: import("react").Context<string | undefined>;
    UpdateContext: import("react").Context<(value: string | undefined) => void>;
    Provider: {
        ({ children }: import("../global/create-stateful-context").ProviderProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    useUpdate: (value: string | undefined, skipUpdate?: boolean) => void;
    Updater: import("react").MemoExoticComponent<{
        ({ value, skipUpdate }: import("../global/create-stateful-context").UpdaterProps<string | undefined>): null;
        displayName: string;
    }>;
};
export interface ListState<T = unknown> {
    activeIndex: number | null;
    prevActiveIndex: number | null;
    prevData: ListDataItem<T>[];
    activeItem: ListDataItem<T> | null;
    needScrollToActive: boolean;
    scrolling: boolean;
    hasOverflow: boolean;
    scrolledToBottom: boolean;
}
interface RenderVirtualizedInnerParams extends Partial<WindowScrollerChildProps> {
    height: number;
    maxHeight?: number;
    autoHeight?: boolean;
    rowCount: number;
}
/**
 * @name List
 * @constructor
 * @extends {ReactComponent}
 */
/**
 * Displays a list of items.
 */
export default class List<T = unknown> extends Component<ListProps<T>, ListState<T>> {
    static defaultProps: {
        data: never[];
        restoreActiveIndex: boolean;
        activateSingleItem: boolean;
        activateFirstItem: boolean;
        onMouseOut: typeof noop;
        onSelect: typeof noop;
        onScrollToBottom: typeof noop;
        onResize: typeof noop;
        shortcuts: boolean;
        renderOptimization: boolean;
        disableMoveDownOverflow: boolean;
        ariaLabel: string;
    };
    state: ListState<T>;
    static getDerivedStateFromProps(nextProps: ListProps, prevState: ListState): {
        prevActiveIndex: number | null | undefined;
        prevData: readonly ListDataItem<unknown>[];
    };
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: ListProps<T>, nextState: ListState<T>): boolean;
    componentDidUpdate(prevProps: ListProps<T>): void;
    componentWillUnmount(): void;
    scheduleScrollListener: (cb: () => void) => void;
    static isItemType: typeof isItemType;
    static ListHint: typeof ListHint;
    static ListProps: {
        Type: typeof Type;
        Dimension: {
            ITEM_PADDING: number;
            ITEM_HEIGHT: number;
            COMPACT_ITEM_HEIGHT: number;
            SEPARATOR_HEIGHT: number;
            SEPARATOR_FIRST_HEIGHT: number;
            SEPARATOR_TEXT_HEIGHT: number;
            TITLE_HEIGHT: number;
            INNER_PADDING: number;
            MARGIN: number;
        };
    };
    virtualizedList?: VirtualizedList | null;
    unmounted?: boolean;
    container?: HTMLElement | null;
    private _bufferSize;
    sizeCacheKey: (index: number) => string | Type.ITEM | Type.MARGIN;
    private _cache;
    private _hasActivatableItems;
    hasActivatableItems(): any;
    activateFirst: () => void;
    selectHandler: (arg: number) => (event: Event | SyntheticEvent, tryKeepOpen?: boolean) => void;
    checkboxHandler: (arg: number) => (event: SyntheticEvent) => void;
    upHandler: (e: KeyboardEvent) => void;
    downHandler: (e: KeyboardEvent) => void;
    homeHandler: (e: KeyboardEvent) => void;
    endHandler: (e: KeyboardEvent) => void;
    moveHandler(index: number, retryCallback: (e: KeyboardEvent) => void, e: KeyboardEvent): void;
    mouseHandler: () => void;
    scrollHandler: () => void;
    enterHandler: (event: KeyboardEvent, shortcut?: string) => boolean;
    getFirst(): ListDataItem<T> | undefined;
    getSelected(): ListDataItem<T> | null;
    defaultItemHeight(): number;
    scrollEndHandler: () => void;
    checkOverflow: () => void;
    getVisibleListHeight(maxHeight: number): number;
    private _deprecatedGenerateKeyFromContent;
    getId(item: ListDataItem<T> | null): string | undefined;
    renderItem: ({ index, style, isScrolling, parent, key }: Partial<ListRowProps>) => import("react/jsx-runtime").JSX.Element;
    addItemDataTestToProp: (props: ListDataItemProps<T>) => ListDataItemProps<T>;
    virtualizedListRef: (el: VirtualizedList | null) => void;
    containerRef: (el: HTMLElement | null) => void;
    private _inner?;
    get inner(): HTMLElement | null | undefined;
    renderVirtualizedInner({ height, maxHeight, autoHeight, rowCount, isScrolling, onChildScroll, scrollTop, registerChild, }: RenderVirtualizedInnerParams): import("react/jsx-runtime").JSX.Element;
    renderVirtualized(maxHeight: number | null | undefined, rowCount: number): import("react/jsx-runtime").JSX.Element;
    renderSimple(maxHeight: number | null | undefined, rowCount: number): import("react/jsx-runtime").JSX.Element;
    id: string;
    shortcutsScope: string;
    shortcutsMap: ShortcutsMap;
    /** @override */
    render(): import("react/jsx-runtime").JSX.Element;
}
export type ListAttrs<T = unknown> = React.JSX.LibraryManagedAttributes<typeof List, ListProps<T>>;
