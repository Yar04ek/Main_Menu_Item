import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useMemo, cloneElement } from 'react';
import List, { ActiveItemContext } from '../list/list';
import Dropdown from '../dropdown/dropdown';
import PopupMenu from '../popup-menu/popup-menu';
import getUID from '../global/get-uid';
import Anchor from '../dropdown/anchor';
import { isArray } from '../global/typescript-utils';
const defaultAriaLabel = 'Dropdown menu';
function DropdownAnchorWrapper({ anchor, pinned, active, activeListItemId, listId, ...restProps }) {
    const anchorAriaProps = useMemo(() => ({
        ...(listId ? { 'aria-haspopup': true } : {}),
        ...(activeListItemId ? { 'aria-activedescendant': activeListItemId, 'aria-owns': listId } : {}),
        ...(active ? { 'aria-expanded': true } : {}),
    }), [active, activeListItemId, listId]);
    const anchorProps = useMemo(() => ({ active, pinned, ...restProps, ...anchorAriaProps }), [pinned, active, restProps, anchorAriaProps]);
    const anchorComponentProps = useMemo(() => ({ ...anchorProps, pinned: `${anchorProps.pinned}` }), [anchorProps]);
    if (typeof anchor === 'string') {
        return _jsx(Anchor, { ...anchorComponentProps, children: anchor });
    }
    if (typeof anchor === 'function') {
        return anchor({ active, pinned, ...restProps }, anchorAriaProps);
    }
    if (!isArray(anchor)) {
        return cloneElement(anchor, typeof anchor.type === 'string' ? anchorAriaProps : anchorComponentProps);
    }
    return _jsx("div", { ...anchorAriaProps, children: anchor });
}
function renderDropdownMenuChildren({ children, popupMenuProps }) {
    if (!children) {
        return _jsx(PopupMenu, { ...popupMenuProps });
    }
    return (popupProps) => children({ ...popupProps, ...popupMenuProps });
}
const DropdownMenu = forwardRef(function DropdownMenu({ id, anchor, ariaLabel, data, onSelect, menuProps, children, ...restDropdownProps }, forwardedRef) {
    const listId = useMemo(() => id || getUID('dropdown-menu-list'), [id]);
    const popupMenuProps = useMemo(() => ({
        ref: forwardedRef,
        id: listId,
        ariaLabel: ariaLabel || defaultAriaLabel,
        closeOnSelect: true,
        activateFirstItem: true,
        data,
        onSelect,
        ...menuProps,
    }), [ariaLabel, data, forwardedRef, listId, menuProps, onSelect]);
    return (_jsx(ActiveItemContext.Provider, { children: _jsx(Dropdown, { anchor: ({ pinned, active, ...restAnchorProps }) => (_jsx(ActiveItemContext.ValueContext.Consumer, { children: activeItemId => (_jsx(DropdownAnchorWrapper, { anchor: anchor, pinned: pinned, active: active, activeListItemId: activeItemId, listId: listId, ...restAnchorProps })) })), ...restDropdownProps, children: renderDropdownMenuChildren({ children, popupMenuProps }) }) }));
});
export default Object.assign(DropdownMenu, { ListProps: List.ListProps });
