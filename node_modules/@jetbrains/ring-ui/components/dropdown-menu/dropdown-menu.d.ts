import { ReactElement, HTMLAttributes, SyntheticEvent, Ref, ReactNode } from 'react';
import { SelectHandlerParams } from '../list/list';
import { AnchorProps, DropdownAttrs, DropdownChildrenFunction } from '../dropdown/dropdown';
import PopupMenu, { PopupMenuAttrs } from '../popup-menu/popup-menu';
import { ListDataItem } from '../list/consts';
export interface DropdownAnchorWrapperProps extends AnchorProps {
    anchor: ReactElement | ReactNode[] | string | ((props: AnchorProps, ariaProps: HTMLAttributes<HTMLElement>) => ReactElement | null);
    activeListItemId?: string | null | undefined;
    listId?: string | undefined;
}
type OnSelectHandler<T> = ((item: ListDataItem<T>, event: Event | SyntheticEvent, params?: SelectHandlerParams) => void) | undefined;
export interface DropdownMenuProps<T = unknown> extends Omit<DropdownAttrs, 'anchor' | 'onSelect' | 'children'> {
    anchor: ReactElement | ReactNode[] | string | ((props: AnchorProps, ariaProps: HTMLAttributes<HTMLElement>) => ReactElement | null);
    data?: readonly ListDataItem<T>[] | undefined;
    ariaLabel?: string | null | undefined;
    onSelect?: OnSelectHandler<T>;
    menuProps?: PopupMenuAttrs<T> | null | undefined;
    children?: DropdownChildrenFunction;
}
declare const _default: (<T = unknown>(props: DropdownMenuProps<T> & {
    ref?: Ref<PopupMenu>;
}) => ReactElement | null) & {
    ListProps: {
        Type: typeof import("../list/consts").Type;
        Dimension: {
            ITEM_PADDING: number;
            ITEM_HEIGHT: number;
            COMPACT_ITEM_HEIGHT: number;
            SEPARATOR_HEIGHT: number;
            SEPARATOR_FIRST_HEIGHT: number;
            SEPARATOR_TEXT_HEIGHT: number;
            TITLE_HEIGHT: number;
            INNER_PADDING: number;
            MARGIN: number;
        };
    };
};
export default _default;
