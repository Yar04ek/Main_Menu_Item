import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useCallback, useImperativeHandle, useRef, useState } from 'react';
import classNames from 'classnames';
import attachmentIcon from '@jetbrains/icons/attachment';
import Icon from '../icon';
import styles from './upload.css';
export const Upload = forwardRef(function Upload({ children, className, onFilesSelected, onFilesRejected, validate = () => true, variant = 'empty', multiple, renderIcon = () => _jsx(Icon, { className: styles.attachmentIcon, glyph: attachmentIcon }), accept, disabled, }, ref) {
    const fileInputRef = useRef(null);
    const [dragOver, setDragOver] = useState(false);
    useImperativeHandle(ref, () => ({ openFilePicker: () => fileInputRef.current?.click() }), []);
    const handleSelectedFiles = useCallback((files) => {
        if (!files.length) {
            return;
        }
        const rejected = files.filter(file => !validate(file));
        if (rejected.length > 0) {
            onFilesRejected?.(files);
            return;
        }
        onFilesSelected(files);
    }, [onFilesRejected, onFilesSelected, validate]);
    const onDragEnter = useCallback(() => setDragOver(true), []);
    const onDragOver = useCallback(e => e.preventDefault(), []);
    const onDragLeave = useCallback(() => setDragOver(false), []);
    const onInputChange = useCallback(() => {
        setDragOver(false);
        if (fileInputRef.current?.files) {
            handleSelectedFiles(Array.from(fileInputRef.current.files));
        }
    }, [handleSelectedFiles]);
    return (_jsxs("div", { className: classNames(className, styles.upload, {
            [styles.disabled]: disabled,
            [styles.dragOver]: dragOver,
            [styles.success]: variant === 'success',
            [styles.error]: variant === 'error',
        }), "data-test": "ring-upload", children: [_jsx("input", { onDragEnter: onDragEnter, onDragOver: onDragOver, onDragLeave: onDragLeave, disabled: disabled, ref: fileInputRef, "data-test": "ring-file-input", multiple: multiple, accept: accept, onChange: onInputChange, type: "file", autoComplete: "off", "aria-label": "file-picker", className: styles.invisibleFileInput }), renderIcon(), children] }));
});
export default Upload;
