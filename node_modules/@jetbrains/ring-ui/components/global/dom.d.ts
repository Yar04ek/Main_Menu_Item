/**
 * @name DOM
 */
import { SyntheticEvent } from 'react';
import type { PropertiesHyphen } from 'csstype';
export declare const getStyles: ((elt: Element, pseudoElt?: string | null) => CSSStyleDeclaration) & typeof getComputedStyle;
export declare function isMounted(node: Node | Range | null | undefined): boolean;
export interface Rect {
    top: number;
    right: number;
    bottom: number;
    left: number;
    width: number;
    height: number;
}
export declare function getRect(node: Element | Range | null | undefined): Rect;
export declare function getPixelRatio(): number;
export declare function getWindowHeight(): number;
export declare function getWindowWidth(): number;
export declare function isNodeInVisiblePartOfPage(node: Element | Range): boolean;
export declare function getDocumentScrollTop(): number;
export declare function getDocumentScrollLeft(): number;
export declare const applyMethodToClasses: (method: "add" | "remove") => (classList: DOMTokenList, classes?: string) => void;
export declare const addClasses: (classList: DOMTokenList, classes?: string) => void;
export declare const removeClasses: (classList: DOMTokenList, classes?: string) => void;
export declare const toggleClasses: (classList: DOMTokenList, classes: Record<string, boolean>) => void;
export declare function setRootStyleProperties(properties?: PropertiesHyphen): void;
export declare function resetRootStyleProperties(properties?: Partial<Record<keyof PropertiesHyphen, unknown>>): void;
export declare class Listeners {
    private _all;
    add<K extends keyof HTMLElementEventMap>(el: HTMLElement, event: K, handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void, options?: boolean | AddEventListenerOptions): () => void;
    add<K extends keyof WindowEventMap>(el: Window, event: K, handler: (this: Window, ev: WindowEventMap[K]) => void, options?: boolean | AddEventListenerOptions): () => void;
    add<K extends keyof DocumentEventMap>(el: Document, event: K, handler: (this: Window, ev: DocumentEventMap[K]) => void, options?: boolean | AddEventListenerOptions): () => void;
    remove(fn: () => void): void;
    removeAll(): void;
}
export declare function preventDefault(e: Event | SyntheticEvent): void;
