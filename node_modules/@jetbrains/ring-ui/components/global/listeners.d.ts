export type Handler<PM extends Record<string, [unknown, unknown]>, E extends keyof PM> = (data: PM[E][0]) => PM[E][1] | Promise<PM[E][1]>;
export default class Listeners<PM extends Record<string, [unknown, unknown]> = Record<string, [void, unknown]>> {
    _all: Map<keyof PM, Set<Handler<PM, keyof PM>>>;
    trigger<E extends keyof PM>(...[event, data]: PM[E][0] extends void ? [E] : [E, PM[E][0]]): Promise<PM[E][1][]>;
    add<E extends keyof PM>(event: E, handler: Handler<PM, E>): void;
    remove<E extends keyof PM>(event: E, handler: Handler<PM, E>): void;
    removeAll(): void;
}
