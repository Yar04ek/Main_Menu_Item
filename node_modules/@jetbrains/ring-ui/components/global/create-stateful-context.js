import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, memo, useContext, useEffect, useState } from 'react';
export default function createStatefulContext(initialValue, name = '') {
    const ValueContext = createContext(initialValue);
    const UpdateContext = createContext(() => { });
    function Provider({ children }) {
        const [value, update] = useState(initialValue);
        return (_jsx(ValueContext.Provider, { value: value, children: _jsx(UpdateContext.Provider, { value: update, children: children }) }));
    }
    Provider.displayName = `${name}Provider`;
    function useUpdate(value, skipUpdate) {
        const update = useContext(UpdateContext);
        useEffect(() => {
            if (!skipUpdate) {
                update(value);
            }
        }, [update, value, skipUpdate]);
    }
    function Updater({ value, skipUpdate }) {
        useUpdate(value, skipUpdate);
        return null;
    }
    Updater.displayName = `${name}Updater`;
    return {
        ValueContext,
        UpdateContext,
        Provider,
        useUpdate,
        Updater: memo(Updater),
    };
}
