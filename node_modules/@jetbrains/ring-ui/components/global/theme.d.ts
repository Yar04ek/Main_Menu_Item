import { HTMLAttributes, ReactElement, FunctionComponent } from 'react';
declare enum Theme {
    AUTO = "auto",
    LIGHT = "light",
    DARK = "dark"
}
export declare const ThemeContext: import("react").Context<{
    theme: Theme.LIGHT | Theme.DARK;
}>;
export declare const GLOBAL_DARK_CLASS_NAME = "ring-ui-theme-dark";
export declare function useTheme(): Theme.LIGHT | Theme.DARK;
export declare function useThemeClasses(theme: Theme): string;
export interface WithThemeClassesProps {
    theme: Theme;
    children: (classes: string) => ReactElement;
}
export declare function WithThemeClasses({ theme, children }: WithThemeClassesProps): ReactElement<any, string | import("react").JSXElementConstructor<any>>;
export declare function applyTheme(theme: Theme.DARK | Theme.LIGHT, container: HTMLElement): void;
type WrapperType = FunctionComponent<HTMLAttributes<HTMLElement> & React.RefAttributes<HTMLElement>>;
export interface ThemeProviderProps extends HTMLAttributes<HTMLDivElement> {
    theme?: Theme;
    passToPopups?: boolean;
    WrapperComponent?: WrapperType;
    target?: HTMLElement;
}
export declare const ThemeProvider: import("react").ForwardRefExoticComponent<ThemeProviderProps & import("react").RefAttributes<HTMLElement>>;
export default Theme;
