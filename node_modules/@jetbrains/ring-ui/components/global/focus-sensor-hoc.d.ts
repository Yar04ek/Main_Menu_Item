import { ComponentType, Ref } from 'react';
export interface FocusSensorOuterProps<T extends HTMLElement> {
    focused?: boolean | undefined;
    autofocus?: boolean | undefined;
    scrollOnTableFocus?: boolean;
    onFocus?: (() => void) | undefined;
    onBlur?: (() => void) | undefined;
    innerRef?: Ref<T> | null | undefined;
}
export interface FocusSensorAddProps<T extends HTMLElement> {
    innerRef: Ref<T>;
    focused: boolean;
    onFocusReset: () => void;
    onFocusRestore: () => void;
}
type RestProps<P, T extends HTMLElement> = Omit<P, keyof FocusSensorAddProps<T>>;
export type FocusSensorProps<P extends FocusSensorAddProps<T>, T extends HTMLElement, C extends ComponentType<P>> = RestProps<React.JSX.LibraryManagedAttributes<C, P>, T> & FocusSensorOuterProps<T>;
export default function focusSensorHOC<T extends HTMLElement, P extends FocusSensorAddProps<T>, C extends ComponentType<P>>(ComposedComponent: C): ComponentType<FocusSensorProps<P, T, typeof ComposedComponent>>;
export {};
