import { ReactNode } from 'react';
type Update<T> = (value: T) => void;
export interface ProviderProps {
    children: ReactNode;
}
export interface UpdaterProps<T> {
    value: T;
    skipUpdate?: boolean;
}
export default function createStatefulContext<T>(initialValue: T, name?: string): {
    ValueContext: import("react").Context<T>;
    UpdateContext: import("react").Context<Update<T>>;
    Provider: {
        ({ children }: ProviderProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    useUpdate: (value: T, skipUpdate?: boolean) => void;
    Updater: import("react").MemoExoticComponent<{
        ({ value, skipUpdate }: UpdaterProps<T>): null;
        displayName: string;
    }>;
};
export {};
