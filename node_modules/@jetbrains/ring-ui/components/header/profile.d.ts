import { ComponentType, HTMLAttributes, PureComponent, ReactNode } from 'react';
import * as React from 'react';
import { Size } from '../avatar/avatar';
import { PopupMenuAttrs } from '../popup-menu/popup-menu';
import { ListDataItem } from '../list/consts';
import { AuthUser } from '../auth/auth';
import { ClickableLinkProps } from '../link/clickableLink';
export interface ProfileTranslations {
    applyChangedUser?: string | null | undefined;
    login?: string | null | undefined;
    profile?: string | null | undefined;
    switchUser?: string | null | undefined;
    logout?: string | null | undefined;
    certificateMismatch?: string | null | undefined;
}
export interface ProfileProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onSelect' | 'children'> {
    closeOnSelect: boolean;
    renderPopupItems: (items: ListDataItem[]) => readonly ListDataItem[];
    translations?: ProfileTranslations | null | undefined;
    size: Size;
    renderGuest: (props: ProfileProps) => ReactNode;
    hasUpdates?: boolean | null | undefined;
    loading?: boolean | undefined;
    onLogin?: (() => void) | undefined;
    onLogout?: (() => void) | null | undefined;
    onSwitchUser?: (() => void) | null | undefined;
    profileUrl?: string | undefined;
    LinkComponent?: ComponentType<ClickableLinkProps> | null | undefined;
    user?: AuthUser | null | undefined | void;
    round?: boolean | null | undefined;
    showName?: boolean | null | undefined;
    showLogIn?: boolean | null | undefined;
    showLogOut?: boolean | null | undefined;
    showSwitchUser?: boolean | null | undefined;
    showApplyChangedUser?: boolean | null | undefined;
    onRevertPostponement?: (() => void) | null | undefined;
    menuProps?: PopupMenuAttrs | null | undefined;
    activeClassName?: string | null | undefined;
    onShow?: () => void;
    onHide?: () => void;
}
export default class Profile extends PureComponent<ProfileProps> {
    static defaultProps: ProfileProps;
    static contextType: React.Context<import("../i18n/i18n-context").I18nContextProps>;
    context: React.ContextType<typeof Profile.contextType>;
    static Size: typeof Size;
    render(): string | number | boolean | import("react/jsx-runtime").JSX.Element | Iterable<ReactNode> | null | undefined;
}
export type ProfileAttrs = React.JSX.LibraryManagedAttributes<typeof Profile, ProfileProps>;
