import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import classNames from 'classnames';
import Avatar, { Size } from '../avatar/avatar';
import Button from '../button/button';
import DropdownMenu from '../dropdown-menu/dropdown-menu';
import PopupMenu from '../popup-menu/popup-menu';
import { I18nContext } from '../i18n/i18n-context';
import { isTruthy } from '../global/typescript-utils';
import styles from './header.css';
const rgItemType = PopupMenu.ListProps.Type.LINK;
export default class Profile extends PureComponent {
    static defaultProps = {
        closeOnSelect: true,
        renderPopupItems: items => items,
        size: Size.Size32,
        renderGuest: ({ loading, onLogin, className, translations }) => (_jsx(I18nContext.Consumer, { children: ({ translate }) => (_jsx("div", { className: classNames(styles.profileEmpty, className), children: _jsx(Button, { primary: true, "data-test": "ring-header-login-button", disabled: loading, loader: loading, onClick: onLogin, children: translations?.login ?? translate('login') }) })) })),
    };
    static contextType = I18nContext;
    static Size = Size;
    render() {
        const { className, activeClassName, closeOnSelect, hasUpdates, onLogout, user, profileUrl, LinkComponent, onSwitchUser, renderPopupItems, onRevertPostponement, showApplyChangedUser, showName, showLogIn, showLogOut, showSwitchUser, renderGuest, translations, size, round, loading, onLogin, menuProps, onShow, onHide, ...props } = this.props;
        const { translate } = this.context;
        if (!user) {
            return (_jsx("div", { ...props, className: classNames(styles.profileEmpty, className), children: _jsx(Avatar, { size: size, round: round }) }));
        }
        if (user.guest) {
            return renderGuest(this.props);
        }
        const avatarWrapper = classNames(styles.avatarWrapper, {
            [styles.hasUpdates]: hasUpdates,
        });
        const anchor = (_jsxs("button", { type: "button", className: styles.anchorClassName, children: [_jsx("span", { className: avatarWrapper, children: _jsx(Avatar, { url: user.profile && user.profile.avatar && user.profile.avatar.url, size: size, round: round, username: user.name }) }), showName && _jsx("span", { children: user.name })] }));
        const items = [
            showApplyChangedUser && {
                rgItemType,
                label: translations?.applyChangedUser ?? translate('applyChangedUser'),
                className: styles.profileMenuItem,
                onClick: onRevertPostponement,
            },
            showLogIn && {
                rgItemType,
                label: translations?.login ?? translate('login'),
                className: styles.profileMenuItem,
                onClick: onRevertPostponement,
            },
            {
                rgItemType: PopupMenu.ListProps.Type.LINK,
                label: translations?.profile ?? translate('profile'),
                target: '_self', // Full page reload in Angular
                href: profileUrl,
                LinkComponent,
            },
            showSwitchUser && {
                rgItemType,
                label: translations?.switchUser ?? translate('switchUser'),
                className: styles.profileMenuItem,
                onClick: onSwitchUser,
            },
            showLogOut && {
                rgItemType,
                label: translations?.logout ?? translate('logout'),
                onClick: onLogout,
            },
        ].filter(isTruthy);
        return (_jsx(DropdownMenu, { ...props, onShow: onShow, onHide: onHide, title: user.name, anchor: anchor, data: renderPopupItems(items), "data-test": "ring-profile", className: classNames(styles.profile, className), activeClassName: activeClassName, menuProps: {
                closeOnSelect,
                left: -2,
                top: -8,
                sidePadding: 32,
                ...menuProps,
            } }));
    }
}
