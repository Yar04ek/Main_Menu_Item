import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import servicesIcon from '@jetbrains/icons/services-20px';
import classNames from 'classnames';
import Dropdown from '../dropdown/dropdown';
import Popup from '../popup/popup';
import Theme from '../global/theme';
import darkStyles from '../global/variables_dark.css';
import HeaderIcon from './header-icon';
import ServicesLink from './services-link';
import styles from './services.css';
const makeAnchor = (loading) => {
    const Anchor = ({ active }) => (_jsx(HeaderIcon, { loader: loading, active: active, icon: servicesIcon, "aria-label": "Services" }));
    return Anchor;
};
export default class Services extends PureComponent {
    static sort = (a, b) => {
        const aApplicationName = a.applicationName || '';
        const bApplicationName = b.applicationName || '';
        return aApplicationName.localeCompare(bApplicationName) || a.name.localeCompare(b.name);
    };
    static defaultProps = {
        theme: Theme.DARK,
    };
    static Link = ServicesLink;
    serviceIsActive = (service) => service.id === this.props.clientId;
    render() {
        const { clientId, loading, services, initShown, theme, ...props } = this.props;
        if (!services) {
            return _jsx(HeaderIcon, { ...props, loader: loading, active: loading, icon: servicesIcon, "aria-label": "Services" });
        }
        const sortedServices = [...services].sort(Services.sort);
        const servicesWithIcons = sortedServices.filter(service => service.iconUrl && service.homeUrl);
        const servicesWithOutIcons = sortedServices.filter(service => !service.iconUrl && service.homeUrl);
        const separatorIsRequired = servicesWithIcons.length !== 0 && servicesWithOutIcons.length !== 0;
        return (_jsx(Dropdown, { ...props, anchor: makeAnchor(loading), initShown: initShown, children: _jsxs(Popup, { className: classNames(styles.services, { [darkStyles.dark]: theme === Theme.DARK }), top: -3, children: [servicesWithIcons.map(service => {
                        const isActive = this.serviceIsActive(service);
                        return (_jsx(Services.Link, { active: isActive, className: isActive ? styles.activeItem : styles.item, service: service }, service.id));
                    }), separatorIsRequired && _jsx("div", { className: styles.line }, "separator"), servicesWithOutIcons.map(service => {
                        const isActive = this.serviceIsActive(service);
                        return (_jsx(Services.Link, { active: isActive, className: isActive ? styles.activeItemStacked : styles.itemStacked, service: service }, service.id));
                    })] }) }));
    }
}
