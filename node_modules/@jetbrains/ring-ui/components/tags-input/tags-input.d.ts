import { PureComponent, SyntheticEvent, ReactNode, ComponentType } from 'react';
import * as React from 'react';
import Select, { SelectItem } from '../select/select';
import { TagType } from '../tags-list/tags-list';
import Caret from '../caret/caret';
import { Size } from '../input/input';
import { ControlsHeight } from '../global/controls-height';
import { Filter } from '../select/select__popup';
import { TagAttrs } from '../tag/tag';
import { LabelType } from '../control-label/control-label';
declare function noop(): void;
export interface ToggleTagParams {
    tag: TagType;
}
export interface TagsInputRequestParams {
    query: string;
}
export interface TagsInputProps {
    /**
     * Datasource should return array(or promise) of suggestions.
     * Each suggestion should contain key and label fields.
     * DataSource should handle caching and response racing (when later request
     * responded earlier) by himself.
     */
    dataSource: (params: TagsInputRequestParams) => readonly SelectItem[] | Promise<readonly SelectItem[]>;
    onAddTag: (params: ToggleTagParams) => void;
    onRemoveTag: (params: ToggleTagParams) => void;
    customTagComponent: ComponentType<TagAttrs>;
    maxPopupHeight: number;
    minPopupWidth: number;
    canNotBeEmpty: boolean;
    disabled: boolean;
    autoOpen: boolean;
    renderOptimization: boolean;
    allowAddNewTags: boolean;
    filter: boolean | Filter;
    placeholder: string;
    className?: string | null | undefined;
    tags?: readonly TagType[] | null | undefined;
    loadingMessage?: string | undefined;
    notFoundMessage?: string | undefined;
    hint?: ReactNode | null | undefined;
    size: Size;
    height?: ControlsHeight | undefined;
    label?: ReactNode;
    labelType?: LabelType;
    id?: string | undefined;
}
interface TagsInputState {
    tags: TagType[];
    prevTags: TagType[] | null;
    suggestions: SelectItem[];
    loading: boolean;
    focused: boolean;
    query: string;
    activeIndex: number | null | undefined;
}
export default class TagsInput extends PureComponent<TagsInputProps, TagsInputState> {
    static defaultProps: {
        dataSource: typeof noop;
        onAddTag: typeof noop;
        onRemoveTag: typeof noop;
        customTagComponent: null;
        maxPopupHeight: number;
        minPopupWidth: number;
        canNotBeEmpty: boolean;
        disabled: boolean;
        autoOpen: boolean;
        renderOptimization: boolean;
        allowAddNewTags: boolean;
        filter: {
            fn: () => boolean;
        };
        placeholder: string;
        size: Size;
    };
    constructor(props: TagsInputProps);
    state: TagsInputState;
    static getDerivedStateFromProps({ tags }: TagsInputProps, { prevTags }: TagsInputState): {
        prevTags: readonly TagType[] | null | undefined;
    };
    componentDidMount(): void;
    static ngModelStateField: string;
    ngModelStateField: string;
    static contextType: React.Context<ControlsHeight>;
    id: string;
    node?: HTMLElement | null;
    nodeRef: (node: HTMLElement | null) => void;
    input?: HTMLInputElement | null;
    caret?: Caret;
    getInputNode(): HTMLInputElement | null | undefined;
    setActiveIndex(activeIndex?: number | null): void;
    focusInput: () => void;
    focus: () => void;
    addTag: (tag: TagType | null) => void;
    onRemoveTag(tagToRemove: TagType): Promise<void | TagType[]>;
    clickHandler: (event: SyntheticEvent) => void;
    filterExistingTags: (suggestions: readonly SelectItem[]) => SelectItem[];
    loadSuggestions: (query?: string) => void;
    private _focusHandler;
    private _blurHandler;
    selectTag: (moveForward?: boolean) => void;
    handleKeyDown: (event: React.KeyboardEvent) => boolean;
    handleClick: (arg: TagType) => () => void;
    handleRemove: (arg: TagType) => () => Promise<void | TagType[]>;
    handleTagCreation: (label: string) => void;
    select?: Select | null;
    selectRef: (el: Select | null) => void;
    render(): import("react/jsx-runtime").JSX.Element;
}
export declare const RerenderableTagsInput: React.ForwardRefExoticComponent<TagsInputProps & React.RefAttributes<TagsInput>>;
export type TagsInputAttrs = React.JSX.LibraryManagedAttributes<typeof TagsInput, TagsInputProps>;
export {};
