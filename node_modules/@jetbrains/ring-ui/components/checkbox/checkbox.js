import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import classNames from 'classnames';
import checkmarkIcon from '@jetbrains/icons/checkmark-12px';
import minusIcon from '@jetbrains/icons/remove-12px';
import Icon from '../icon/icon';
import { createComposedRef } from '../global/composeRefs';
import ControlHelp from '../control-help/control-help';
import styles from './checkbox.css';
/**
 * @name Checkbox
 */
/**
 * Displays a checkbox.
 */
export default class Checkbox extends PureComponent {
    static defaultProps = {
        indeterminate: false,
    };
    componentDidMount() {
        if (this.input != null) {
            this.input.indeterminate = this.props.indeterminate;
        }
    }
    componentDidUpdate(prevProps) {
        const { indeterminate } = this.props;
        if (this.input != null && indeterminate !== prevProps.indeterminate) {
            this.input.indeterminate = this.props.indeterminate;
        }
    }
    input;
    inputRef = (el) => {
        if (el != null) {
            el.indeterminate = this.props.indeterminate;
        }
        this.input = el;
    };
    composedInputRef = createComposedRef();
    render() {
        const { children, label, className, containerClassName, containerStyle, cellClassName, labelClassName, indeterminate, inputRef, help, ...restProps } = this.props;
        const classes = classNames(styles.input, className);
        const containerClasses = classNames(styles.checkbox, containerClassName);
        const cellClasses = classNames(styles.cell, cellClassName);
        const labelClasses = classNames(styles.label, labelClassName);
        return (_jsxs("label", { className: containerClasses, style: containerStyle, "data-test": "ring-checkbox", children: [_jsx("input", { ...restProps, "data-checked": restProps.checked, ref: this.composedInputRef(this.inputRef, inputRef), type: "checkbox", className: classes }), _jsx("div", { className: styles.cellWrapper, children: _jsxs("span", { className: cellClasses, children: [_jsx(Icon, { glyph: checkmarkIcon, className: styles.check }), _jsx(Icon, { glyph: minusIcon, className: styles.minus })] }) }), _jsxs("span", { className: labelClasses, children: [label || children, help && _jsx(ControlHelp, { children: help })] })] }));
    }
}
