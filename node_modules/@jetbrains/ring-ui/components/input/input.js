import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import classNames from 'classnames';
import closeIcon from '@jetbrains/icons/close-12px';
import Button from '../button/button';
import getUID from '../global/get-uid';
import Icon from '../icon/icon';
import { I18nContext } from '../i18n/i18n-context';
import { createComposedRef } from '../global/composeRefs';
import { ControlsHeightContext } from '../global/controls-height';
import { ControlLabel } from '../control-label/control-label';
import ControlHelp from '../control-help/control-help';
import styles from './input.css';
function noop() { }
/**
 * @name Input
 */
var Size;
(function (Size) {
    Size["AUTO"] = "Auto";
    Size["S"] = "S";
    Size["M"] = "M";
    Size["L"] = "L";
    Size["FULL"] = "FULL";
})(Size || (Size = {}));
export class Input extends PureComponent {
    static defaultProps = {
        size: Size.M,
        onChange: noop,
        inputRef: noop,
        enableShortcuts: ['esc'],
    };
    state = {
        empty: true,
    };
    componentDidMount() {
        this.frame = requestAnimationFrame(() => this.adapt());
    }
    componentDidUpdate() {
        this.adapt();
    }
    componentWillUnmount() {
        if (this.frame != null) {
            cancelAnimationFrame(this.frame);
        }
    }
    static contextType = ControlsHeightContext;
    frame;
    input;
    id = getUID('ring-input-');
    getId() {
        return this.props.id || this.id;
    }
    checkValue() {
        this.setState({
            empty: !this.input?.value,
        });
        if (this.props.multiline && this.input != null && this.input.scrollHeight >= this.input.clientHeight) {
            this.stretch(this.input);
        }
    }
    stretch(el) {
        if (!el || !el.style) {
            return;
        }
        el.style.height = '0'; // To know the real scrollHeight
        el.style.height = `${el.scrollHeight + 2}px`;
    }
    adapt() {
        this.checkValue();
    }
    inputRef = (el) => {
        this.input = el;
    };
    composedInputRef = createComposedRef();
    clear = (e) => {
        this.props.onClear?.(e);
    };
    handleInputChange = (e) => {
        if (!this.props.multiline) {
            this.props.onChange?.(e);
            this.checkValue();
        }
    };
    handleTextareaChange = (e) => {
        if (this.props.multiline) {
            this.props.onChange?.(e);
            this.checkValue();
        }
    };
    render() {
        const { 
        // Modifiers
        size, multiline, borderless, 
        // Props
        label, labelType, error, help, className, inputClassName, children, value, onClear, disabled, inputRef, onChange, enableShortcuts, id, placeholder, icon, translations, height = this.context, beforeInput, afterInput, ...restProps } = this.props;
        const { empty } = this.state;
        const clearable = !!onClear;
        const classes = classNames(className, styles.outerContainer, [styles[`size${size}`]], [styles[`height${height}`]], {
            'ring-js-shortcuts': enableShortcuts === true,
            [styles.error]: error != null,
            [styles.empty]: empty,
            [styles.withIcon]: icon != null,
            [styles.clearable]: clearable,
            [styles.borderless]: borderless,
        });
        const inputClasses = classNames(styles.input, inputClassName);
        const text = value != null ? value : children;
        const commonProps = {
            ref: this.composedInputRef(this.inputRef, inputRef),
            className: inputClasses,
            value: text,
            disabled,
            id: this.getId(),
            placeholder,
            'aria-label': typeof label === 'string' && label ? label : placeholder,
            'data-enabled-shortcuts': Array.isArray(enableShortcuts) ? enableShortcuts.join(',') : null,
        };
        return (_jsx(I18nContext.Consumer, { children: ({ translate }) => (_jsxs("div", { className: classes, "data-test": "ring-input", children: [label && (_jsx(ControlLabel, { htmlFor: this.getId(), disabled: disabled, type: labelType, children: label })), _jsxs("div", { className: styles.container, children: [icon && _jsx(Icon, { glyph: icon, className: styles.icon }), beforeInput, multiline ? (_jsx("textarea", { onChange: this.handleTextareaChange, rows: 1, ...commonProps, ...restProps })) : (_jsx("input", { onChange: this.handleInputChange, ...commonProps, ...restProps })), clearable && !disabled && (_jsx(Button, { title: translations?.clear ?? translate('clear'), "data-test": "ring-input-clear", className: styles.clear, icon: closeIcon, onClick: this.clear })), afterInput] }), error ? (_jsx("div", { className: styles.errorText, children: error })) : (help && _jsx(ControlHelp, { className: styles.helpText, children: help }))] })) }));
    }
}
export default Input;
export { Size };
