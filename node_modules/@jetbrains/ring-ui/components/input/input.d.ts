import { PureComponent, Ref, ComponentType, InputHTMLAttributes, TextareaHTMLAttributes, ReactNode } from 'react';
import * as React from 'react';
import { ControlsHeight } from '../global/controls-height';
import { LabelType } from '../control-label/control-label';
declare function noop(): void;
/**
 * @name Input
 */
declare enum Size {
    AUTO = "Auto",
    S = "S",
    M = "M",
    L = "L",
    FULL = "FULL"
}
export interface InputTranslations {
    clear: string;
}
export interface InputBaseProps {
    size: Size;
    enableShortcuts: boolean | string[];
    children?: string | undefined;
    inputClassName?: string | null | undefined;
    label?: ReactNode;
    labelType?: LabelType;
    error?: ReactNode | null | undefined;
    help?: ReactNode | null | undefined;
    borderless?: boolean | null | undefined;
    onClear?: ((e: React.MouseEvent<HTMLButtonElement>) => void) | null | undefined;
    icon?: string | ComponentType | null | undefined;
    height?: ControlsHeight | undefined;
    beforeInput?: ReactNode;
    afterInput?: ReactNode;
    translations?: InputTranslations | null | undefined;
}
type Override<D, S> = Omit<D, keyof S> & S;
export type InputSpecificProps = Override<InputHTMLAttributes<HTMLInputElement>, InputBaseProps> & {
    multiline?: false | undefined;
    inputRef: Ref<HTMLInputElement>;
};
type TextAreaSpecificProps = Override<TextareaHTMLAttributes<HTMLTextAreaElement>, InputBaseProps> & {
    multiline: true;
    inputRef: Ref<HTMLTextAreaElement>;
};
export type InputProps = InputSpecificProps | TextAreaSpecificProps;
export declare class Input extends PureComponent<InputProps> {
    static defaultProps: {
        size: Size;
        onChange: typeof noop;
        inputRef: typeof noop;
        enableShortcuts: string[];
    };
    state: {
        empty: boolean;
    };
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    static contextType: React.Context<ControlsHeight>;
    frame?: number;
    input?: HTMLInputElement | HTMLTextAreaElement | null;
    id: string;
    getId(): string;
    checkValue(): void;
    stretch(el: HTMLElement | null | undefined): void;
    adapt(): void;
    inputRef: (el: HTMLInputElement | HTMLTextAreaElement | null) => void;
    composedInputRef: import("memoize-one").MemoizedFn<(...refs: (Ref<HTMLInputElement | HTMLTextAreaElement> | undefined)[]) => (value: HTMLInputElement | HTMLTextAreaElement | null) => void>;
    clear: (e: React.MouseEvent<HTMLButtonElement>) => void;
    handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleTextareaChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type ContainerProps<P extends InputProps> = React.JSX.LibraryManagedAttributes<typeof Input, P>;
export type InputSpecificAttrs = ContainerProps<InputSpecificProps>;
export type TextAreaSpecificAttrs = ContainerProps<TextAreaSpecificProps>;
export type InputAttrs = InputSpecificAttrs | TextAreaSpecificAttrs;
export default Input;
export { Size };
