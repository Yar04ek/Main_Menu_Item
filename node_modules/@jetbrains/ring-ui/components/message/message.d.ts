import { Component, ReactNode } from 'react';
import Popup, { PopupAttrs } from '../popup/popup';
import { Directions } from '../popup/popup.consts';
import { IconType } from '../icon/icon';
import { ButtonAttrs } from '../button/button';
import Theme from '../global/theme';
export interface MessageTranslations {
    gotIt: string;
    dismiss: string;
}
export interface MessageProps {
    icon: string | IconType | null;
    directions: readonly Directions[];
    translations?: MessageTranslations | null | undefined;
    theme: Theme;
    title?: string | null | undefined;
    children?: ReactNode;
    className?: string | null | undefined;
    tailClassName?: string | null | undefined;
    direction?: Directions | null | undefined;
    popupProps?: Partial<PopupAttrs> | null | undefined;
    buttonProps?: ButtonAttrs | null | undefined;
    tailOffset?: number | null | undefined;
    onClose?: (() => void) | undefined;
    onDismiss?: (() => void) | null | undefined;
}
interface MessageState {
    direction?: Directions;
}
/**
 * Displays a popup containing a message.
 */
export default class Message extends Component<MessageProps> {
    static defaultProps: {
        icon: string;
        directions: Directions[];
        theme: Theme;
    };
    state: MessageState;
    static Directions: typeof Directions;
    static PopupProps: {
        Directions: typeof Directions;
        Dimension: typeof import("../popup/popup.consts").Dimension;
        MinWidth: typeof import("../popup/popup.consts").MinWidth;
        MaxHeight: typeof import("../popup/popup.consts").MaxHeight;
    };
    private _onDirectionChange;
    popup?: Popup | null;
    node?: HTMLElement | null;
    popupRef: (el: Popup | null) => void;
    getTailOffset(): number;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type MessageAttrs = React.JSX.LibraryManagedAttributes<typeof Message, MessageProps>;
export {};
