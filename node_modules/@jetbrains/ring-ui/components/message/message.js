import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Component } from 'react';
import classNames from 'classnames';
import gift from '@jetbrains/icons/gift';
import Popup from '../popup/popup';
import { Directions } from '../popup/popup.consts';
import Icon from '../icon/icon';
import Button from '../button/button';
import { I18nContext } from '../i18n/i18n-context';
import Theme, { ThemeProvider, WithThemeClasses } from '../global/theme';
import darkStyles from '../global/variables_dark.css';
import styles from './message.css';
/**
 * @name Message
 */
const UNIT = 8;
const TAIL_SIZE = 11;
const getTailOffsets = (offset) => ({
    [Directions.BOTTOM_RIGHT]: { top: 0, left: offset + UNIT, transform: 'rotate(135deg)' },
    [Directions.BOTTOM_LEFT]: {
        top: 0,
        right: offset - UNIT - TAIL_SIZE,
        transform: 'rotate(135deg)',
    },
    [Directions.BOTTOM_CENTER]: { top: 0, left: offset + UNIT, transform: 'rotate(135deg)' },
    [Directions.TOP_RIGHT]: { bottom: -TAIL_SIZE, left: offset - UNIT, transform: 'rotate(-45deg)' },
    [Directions.TOP_LEFT]: {
        bottom: -TAIL_SIZE,
        right: offset + UNIT - TAIL_SIZE,
        transform: 'rotate(-45deg)',
    },
    [Directions.TOP_CENTER]: { bottom: -TAIL_SIZE, left: offset - UNIT, transform: 'rotate(-45deg)' },
    [Directions.RIGHT_TOP]: { bottom: offset + UNIT - TAIL_SIZE, left: 0, transform: 'rotate(45deg)' },
    [Directions.RIGHT_BOTTOM]: { top: offset - UNIT, left: 0, transform: 'rotate(45deg)' },
    [Directions.RIGHT_CENTER]: { top: offset - UNIT, left: 0, transform: 'rotate(45deg)' },
    [Directions.LEFT_TOP]: {
        bottom: offset - UNIT - TAIL_SIZE,
        right: -TAIL_SIZE,
        transform: 'rotate(-135deg)',
    },
    [Directions.LEFT_BOTTOM]: { top: offset + UNIT, right: -TAIL_SIZE, transform: 'rotate(-135deg)' },
    [Directions.LEFT_CENTER]: { top: offset + UNIT, right: -TAIL_SIZE, transform: 'rotate(-135deg)' },
});
/**
 * Displays a popup containing a message.
 */
export default class Message extends Component {
    static defaultProps = {
        icon: gift,
        directions: [
            Directions.TOP_RIGHT,
            Directions.TOP_LEFT,
            Directions.TOP_CENTER,
            Directions.BOTTOM_RIGHT,
            Directions.BOTTOM_LEFT,
            Directions.BOTTOM_CENTER,
            Directions.RIGHT_TOP,
            Directions.RIGHT_BOTTOM,
            Directions.RIGHT_CENTER,
            Directions.LEFT_TOP,
            Directions.LEFT_BOTTOM,
            Directions.LEFT_CENTER,
        ],
        theme: Theme.DARK,
    };
    state = {};
    static Directions = Directions;
    static PopupProps = Popup.PopupProps;
    _onDirectionChange = (direction) => this.setState({ direction });
    popup;
    node;
    popupRef = (el) => {
        this.popup = el;
        this.node = this.popup?.node;
    };
    getTailOffset() {
        const DEFAULT_OFFSET = 32;
        const { popupProps } = this.props;
        if (this.props.tailOffset != null) {
            return this.props.tailOffset;
        }
        const anchor = popupProps?.anchorElement || this.popup?.parent;
        if (!anchor) {
            return DEFAULT_OFFSET;
        }
        const offset = Math.floor(anchor.offsetWidth / 2);
        const isOpenedToRight = this.state.direction != null && [Directions.TOP_RIGHT, Directions.BOTTOM_RIGHT].includes(this.state.direction);
        if (popupProps?.left && isOpenedToRight) {
            return offset - popupProps?.left;
        }
        return offset;
    }
    render() {
        const { children, className, tailClassName, title, icon, popupProps, buttonProps, onClose, onDismiss, translations, theme, } = this.props;
        const classes = classNames(styles.message, className, {
            [darkStyles.dark]: theme === Theme.DARK,
        });
        const tailClasses = classNames(styles.tail, tailClassName);
        const popupDirections = this.props.direction ? [this.props.direction] : this.props.directions;
        const { direction } = this.state;
        return (_jsx(I18nContext.Consumer, { children: ({ translate }) => (_jsx(WithThemeClasses, { theme: theme, children: themeClasses => (_jsx(Popup, { ref: this.popupRef, hidden: false, directions: popupDirections, className: classNames(classes, themeClasses), offset: UNIT * 2, onDirectionChange: this._onDirectionChange, ...popupProps, children: _jsxs(ThemeProvider, { theme: theme, passToPopups: true, children: [direction && _jsx("div", { className: tailClasses, style: getTailOffsets(this.getTailOffset())[direction] }), icon && _jsx(Icon, { className: styles.icon, glyph: icon }), title && (_jsx("h1", { "data-test": "rgMessageTitle", className: styles.title, children: title })), children && _jsx("div", { className: styles.description, children: children }), (onClose || buttonProps) && (_jsx(Button, { className: styles.gotIt, onClick: onClose, primary: true, ...buttonProps, children: translations?.gotIt ?? translate('gotIt') })), onDismiss && (_jsx(Button, { onClick: onDismiss, inline: true, children: translations?.dismiss ?? translate('dismiss') }))] }) })) })) }));
    }
}
