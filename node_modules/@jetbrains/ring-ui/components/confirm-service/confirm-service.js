import { jsx as _jsx } from "react/jsx-runtime";
import { createRoot } from 'react-dom/client';
import Confirm from '../confirm/confirm';
import { ControlsHeightContext, getGlobalControlsHeight } from '../global/controls-height';
const containerElement = document.createElement('div');
export const reactRoot = createRoot(containerElement);
/**
 * Renders Confirm into virtual node to skip maintaining container
 */
function renderConfirm(props) {
    const { buttonsHeight = getGlobalControlsHeight(), ...restProps } = props;
    reactRoot.render(_jsx(ControlsHeightContext.Provider, { value: buttonsHeight, children: _jsx(Confirm, { ...restProps }) }));
}
export default function confirm({ text, description, confirmLabel = 'OK', rejectLabel = 'Cancel', cancelIsDefault, onBeforeConfirm, buttonsHeight, }) {
    return new Promise((resolve, reject) => {
        const props = {
            text,
            description,
            confirmLabel,
            rejectLabel,
            cancelIsDefault,
            buttonsHeight,
            show: true,
            onConfirm: () => {
                if (onBeforeConfirm) {
                    renderConfirm({ ...props, inProgress: true });
                    return Promise.resolve(onBeforeConfirm())
                        .then(() => {
                        renderConfirm({ ...props, show: false });
                        resolve();
                    })
                        .catch(err => {
                        renderConfirm({ ...props, show: false });
                        reject(err);
                    });
                }
                renderConfirm({ ...props, show: false });
                return resolve();
            },
            onReject: () => {
                renderConfirm({ ...props, show: false });
                reject(new Error('Confirm(@jetbrains/ring-ui): null exception'));
            },
        };
        renderConfirm(props);
    });
}
export function hideConfirm() {
    renderConfirm({ text: '', show: false });
}
