import { HTMLAttributes, PureComponent, ReactNode, RefCallback } from 'react';
import * as React from 'react';
import { IconType } from '../icon/icon';
export interface TagRenderProps extends HTMLAttributes<HTMLElement> {
    disabled: boolean;
    ref: RefCallback<HTMLElement>;
    'data-test': string;
}
export interface TagProps {
    onRemove?: ((event: React.MouseEvent<HTMLElement>) => void) | null;
    onClick: (event: React.MouseEvent<HTMLElement>) => void;
    readOnly: boolean;
    disabled: boolean;
    focused: boolean;
    render: (props: TagRenderProps) => ReactNode;
    children?: ReactNode;
    className?: string | null | undefined;
    rgTagIcon?: string | IconType | null | undefined;
    icon?: string | undefined;
    avatar?: string | null | undefined;
    rgTagTitle?: string | undefined;
    textColor?: string | undefined;
    backgroundColor?: string | undefined;
}
/**
 * @name Tag
 */
export default class Tag extends PureComponent<TagProps> {
    static defaultProps: TagProps;
    state: {
        focused: boolean;
    };
    componentDidUpdate(prevProps: TagProps): void;
    componentWillUnmount(): void;
    onDocumentClick: (event: MouseEvent) => void;
    tagNode?: HTMLElement | null;
    tagRef: (el: HTMLElement | null) => void;
    setDocumentClickListener(setListener: boolean): void;
    renderCustomIcon(): import("react/jsx-runtime").JSX.Element | null;
    private _renderImageElement;
    renderImage(): import("react/jsx-runtime").JSX.Element | null;
    renderAvatar(): import("react/jsx-runtime").JSX.Element | null;
    renderRemoveIcon(): import("react/jsx-runtime").JSX.Element | null;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type TagAttrs = React.JSX.LibraryManagedAttributes<typeof Tag, TagProps>;
