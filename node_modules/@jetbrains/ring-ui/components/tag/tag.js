import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import classNames from 'classnames';
import closeIcon from '@jetbrains/icons/close-12px';
import Icon from '../icon/icon';
import Button from '../button/button';
import { ControlsHeight } from '../global/controls-height';
import styles from './tag.css';
/**
 * @name Tag
 */
export default class Tag extends PureComponent {
    static defaultProps = {
        onClick: () => { },
        readOnly: false,
        disabled: false,
        focused: false,
        render: props => _jsx("button", { type: "button", ...props }),
    };
    state = {
        focused: false,
    };
    componentDidUpdate(prevProps) {
        if (this.props.focused !== prevProps.focused) {
            this.setState({ focused: this.props.focused });
        }
        if (this.state.focused) {
            this.tagNode?.focus();
        }
        this.setDocumentClickListener(this.state.focused);
    }
    componentWillUnmount() {
        this.setDocumentClickListener(false);
        this.setState({ focused: false });
    }
    onDocumentClick = (event) => {
        if (this.tagNode) {
            this.setState({ focused: this.tagNode === event.target });
        }
    };
    tagNode;
    tagRef = (el) => {
        this.tagNode = el;
    };
    setDocumentClickListener(setListener) {
        if (setListener) {
            document.addEventListener('click', this.onDocumentClick);
        }
        else {
            document.removeEventListener('click', this.onDocumentClick);
        }
    }
    renderCustomIcon() {
        if (this.props.rgTagIcon) {
            return _jsx(Icon, { className: styles.icon, title: this.props.rgTagTitle, glyph: this.props.rgTagIcon });
        }
        return null;
    }
    _renderImageElement(avatarSrc) {
        const classes = classNames({
            [styles.customIcon]: this.props.icon,
            [styles.avatarIcon]: avatarSrc,
        });
        return _jsx("img", { alt: avatarSrc ? 'Avatar' : 'Icon', className: classes, src: avatarSrc || this.props.icon });
    }
    renderImage() {
        if (this.props.icon && !this.props.avatar) {
            return this._renderImageElement();
        }
        return null;
    }
    renderAvatar() {
        if (this.props.avatar) {
            return _jsx("span", { className: styles.avatarContainer, children: this._renderImageElement(this.props.avatar) });
        }
        return null;
    }
    renderRemoveIcon() {
        if (!this.props.readOnly && this.props.onRemove) {
            return (_jsx(Button, { title: "Remove", icon: closeIcon, "data-test": "ring-tag-remove", className: styles.remove, iconClassName: styles.removeIcon, onClick: this.props.onRemove, style: { '--ring-secondary-color': this.props.textColor }, height: ControlsHeight.M }));
        }
        return null;
    }
    render() {
        const classes = classNames('ring-js-shortcuts', styles.tag, {
            [styles.focused]: this.state.focused,
            [styles.disabled]: this.props.disabled,
            [styles.withRemove]: !this.props.readOnly && this.props.onRemove,
        }, this.props.className);
        const { backgroundColor, textColor, render } = this.props;
        return (_jsxs("span", { className: styles.container, children: [render({
                    'data-test': 'ring-tag',
                    className: classes,
                    ref: this.tagRef,
                    onClick: this.props.onClick,
                    style: { backgroundColor, color: textColor },
                    disabled: this.props.disabled,
                    children: (_jsxs(_Fragment, { children: [this.renderAvatar(), this.renderCustomIcon(), this.renderImage(), _jsx("span", { className: styles.content, children: this.props.children })] })),
                }), this.renderRemoveIcon()] }));
    }
}
