import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { createRef, PureComponent } from 'react';
import classNames from 'classnames';
import chevronDown from '@jetbrains/icons/chevron-down';
import chevron12pxDown from '@jetbrains/icons/chevron-12px-down';
import deprecate from 'util-deprecate';
import Icon, { Size } from '../icon/icon';
import ClickableLink from '../link/clickableLink';
import { ControlsHeightContext } from '../global/controls-height';
import styles from './button.css';
import { getButtonClasses } from './button__classes';
const warnText = deprecate(() => { }, 'Button: "text" prop is deprecated and will be removed in 8.0. Use inline instead.');
/**
 * @name Button
 */
/**
 * A component for displaying variously styled buttons.
 */
export class Button extends PureComponent {
    static IconSize = Size;
    static contextType = ControlsHeightContext;
    buttonRef = createRef();
    render() {
        const { 
        // Modifiers
        active, danger, delayed, loader, primary, success, error, secondary, ghost, short, text, dropdown, height, 
        // Props
        icon, iconSize, iconClassName, iconSuppressSizeWarning, className, children, inline, ...props } = this.props;
        const isInline = inline ?? text ?? icon != null;
        if (text != null) {
            warnText();
        }
        const classes = getButtonClasses({
            ...this.props,
            inline: isInline,
            height: height ?? this.context,
        });
        const content = (_jsxs(_Fragment, { children: [icon && (_jsx(Icon, { className: classNames(styles.icon, iconClassName), glyph: icon, size: iconSize, suppressSizeWarning: iconSuppressSizeWarning })), children, dropdown && _jsx(Icon, { glyph: isInline ? chevron12pxDown : chevronDown, className: styles.dropdownIcon })] }));
        const commonProps = {
            tabIndex: loader ? -1 : 0,
            ...props,
            className: classes,
            children: (_jsxs(_Fragment, { children: [loader && !isInline && _jsx("div", { className: styles.loaderBackground }), content] })),
        };
        return commonProps.href != null ? (_jsx(ClickableLink, { ...commonProps })) : (_jsx("button", { ref: this.buttonRef, type: "button", ...commonProps }));
    }
}
export { Size as IconSize };
export default Button;
