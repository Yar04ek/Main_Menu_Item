import alert from '../alert-service/alert-service';
/**
 * @return {LocalStorage}
 * @param {{type: string}} config Set to "session" to use sessionStorage
 * @constructor
 */
export default class LocalStorage {
    static async safePromise(resolver) {
        try {
            return await new Promise(resolver);
        }
        catch (e) {
            if (e instanceof Error && e.name === 'NS_ERROR_FILE_CORRUPTED') {
                alert.error('Sorry, it looks like your browser storage is corrupted. ' +
                    'Please clear your storage by going to Tools -> Clear Recent History -> Cookies' +
                    ' and setting time range to "Everything". This will remove the corrupted browser storage across all sites.');
            }
            throw e;
        }
    }
    storageType;
    constructor(config = {}) {
        this.storageType = config.type === 'session' ? 'sessionStorage' : 'localStorage';
    }
    /**
     * @param {string} name
     * @return {Promise}
     */
    get(name) {
        return LocalStorage.safePromise(resolve => {
            const value = window[this.storageType].getItem(name);
            if (value != null) {
                try {
                    resolve(JSON.parse(value));
                }
                catch (e) {
                    resolve(value);
                }
            }
            else {
                resolve(value);
            }
        });
    }
    /**
     * @param {string} name
     * @param {object} value
     * @return {Promise}
     */
    set(name, value) {
        return LocalStorage.safePromise(resolve => {
            window[this.storageType].setItem(name, JSON.stringify(value));
            resolve(value);
        });
    }
    /**
     * @param {string} name
     * @return {Promise}
     */
    remove(name) {
        const storageType = this.storageType;
        return LocalStorage.safePromise(resolve => {
            if (window[storageType].hasOwnProperty(name)) {
                window[storageType].removeItem(name);
            }
            resolve();
        });
    }
    /**
     * @param callback
     * @return {Promise}s
     */
    each(callback) {
        const storageType = this.storageType;
        return LocalStorage.safePromise(resolve => {
            const promises = [];
            for (const item in window[storageType]) {
                if (window[storageType].hasOwnProperty(item)) {
                    const value = window[storageType].getItem(item);
                    let resolvedValue = null;
                    if (value != null) {
                        try {
                            resolvedValue = JSON.parse(value);
                        }
                        catch (e) {
                            resolvedValue = value;
                        }
                    }
                    promises.push(Promise.resolve(callback(item, resolvedValue)));
                }
            }
            resolve(Promise.all(promises));
        });
    }
    /**
     * @param {string} name
     * @param {Function} callback
     * @return {Function}
     */
    on(name, callback) {
        function handleStorage(e) {
            if (e.key === name) {
                if (e.newValue != null) {
                    try {
                        callback(JSON.parse(e.newValue));
                    }
                    catch (err) {
                        callback(e.newValue);
                    }
                }
                else {
                    callback(e.newValue);
                }
            }
        }
        window.addEventListener('storage', handleStorage, false);
        return () => window.removeEventListener('storage', handleStorage, false);
    }
}
