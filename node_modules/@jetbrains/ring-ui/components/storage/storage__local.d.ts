import { StorageInterface, StorageConfig } from './storage';
/**
 * @return {LocalStorage}
 * @param {{type: string}} config Set to "session" to use sessionStorage
 * @constructor
 */
export default class LocalStorage implements StorageInterface {
    static safePromise<T>(resolver: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: unknown) => void) => void): Promise<T>;
    storageType: 'sessionStorage' | 'localStorage';
    constructor(config?: StorageConfig);
    /**
     * @param {string} name
     * @return {Promise}
     */
    get<T>(name: string): Promise<T | null>;
    /**
     * @param {string} name
     * @param {object} value
     * @return {Promise}
     */
    set<T>(name: string, value: T): Promise<T>;
    /**
     * @param {string} name
     * @return {Promise}
     */
    remove(name: string): Promise<void>;
    /**
     * @param callback
     * @return {Promise}s
     */
    each<R>(callback: (item: string, value: unknown) => R | Promise<R>): Promise<R[]>;
    /**
     * @param {string} name
     * @param {Function} callback
     * @return {Function}
     */
    on<T>(name: string, callback: (value: T | null) => void): () => void;
}
