import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import alertService from '../alert-service/alert-service';
import Alert from '../alert/alert';
import Link from '../link/link';
import Group from '../group/group';
import styles from './down-notification.css';
let key = null;
function renderAlert(message, type = Alert.Type.WARNING) {
    const existingAlert = alertService.showingAlerts.filter(alert => alert.key === key)[0];
    if (!existingAlert) {
        key = alertService.addAlert(message, type, 0, { closeable: false });
    }
    else {
        existingAlert.message = message;
        existingAlert.type = type;
        alertService.renderAlerts();
    }
}
function Message({ translations, onCheckAgain }) {
    const { backendIsNotAvailable, checkAgain, errorMessage } = translations;
    return (_jsxs("div", { "data-test": "ring-backend-down-notification", children: [_jsx(Group, { children: _jsx("div", { className: styles.title, children: backendIsNotAvailable }) }), _jsxs("span", { className: styles.error, children: [errorMessage, " "] }), _jsx(Link, { onClick: onCheckAgain, "data-test": "check-again", children: checkAgain })] }));
}
export default function onBackendDown({ onCheckAgain, translations }) {
    async function checkAgainWithoutClosing(e) {
        // Alert has weird behaviour of handling clicks by "a" tags
        e.stopPropagation();
        try {
            renderAlert('Connecting...', Alert.Type.LOADING);
            await onCheckAgain();
        }
        catch (err) {
            renderAlert(_jsx(Message, { translations: translations, onCheckAgain: checkAgainWithoutClosing }));
        }
    }
    renderAlert(_jsx(Message, { translations: translations, onCheckAgain: checkAgainWithoutClosing }));
    return () => alertService.remove(key);
}
