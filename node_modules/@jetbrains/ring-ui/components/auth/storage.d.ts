import { StorageClass, StorageInterface } from '../storage/storage';
import { AuthUser } from './auth__core';
import { AuthResponse } from './response-parser';
export interface StoredToken {
    accessToken: string;
    scopes?: string[];
    expires?: number;
    lifeTime?: number;
    waitForRedirectTimeout?: number;
}
export interface AuthState extends AuthResponse {
    restoreLocation?: string;
    scopes?: string[];
    nonRedirect?: boolean | null | undefined;
    created?: number;
}
export interface AuthStorageConfig {
    stateKeyPrefix?: string | null | undefined;
    tokenKey?: string | null | undefined;
    messagePrefix?: string | null | undefined;
    userKey?: string | null | undefined;
    stateTTL?: number | null | undefined;
    storage?: StorageClass | null | undefined;
    stateQuota?: number | null | undefined;
}
export default class AuthStorage<M = unknown> {
    messagePrefix: string;
    stateKeyPrefix: string;
    tokenKey: string;
    userKey: string;
    stateTTL: number;
    stateQuota: number;
    private _lastMessage;
    _stateStorage: StorageInterface;
    _tokenStorage: StorageInterface;
    _messagesStorage: StorageInterface;
    private _currentUserStorage;
    /**
     * Custom storage for Auth
     * @param {{stateKeyPrefix: string, tokenKey: string, onTokenRemove: Function}} config
     */
    constructor(config: AuthStorageConfig);
    /**
     * Add token change listener
     * @param {function(string)} fn Token change listener
     * @return {function()} remove listener function
     */
    onTokenChange(fn: (token: StoredToken | null) => void): () => void;
    /**
     * Add state change listener
     * @param {string} stateKey State key
     * @param {function(string)} fn State change listener
     * @return {function()} remove listener function
     */
    onStateChange(stateKey: string, fn: (state: AuthState | null) => void): () => void;
    /**
     * Add state change listener
     * @param {string} key State key
     * @param {function(string)} fn State change listener
     * @return {function()} remove listener function
     */
    onMessage(key: string, fn: (message: M | null) => void): () => void;
    sendMessage(key: string, message?: M | null): void;
    /**
     * Save authentication request state.
     *
     * @param {string} id Unique state identifier
     * @param {StoredState} state State to store
     * @param {boolean=} dontCleanAndRetryOnFail If falsy then remove all stored states and try again to save state
     */
    saveState(id: string, state: AuthState, dontCleanAndRetryOnFail?: boolean): Promise<void>;
    /**
     * Remove all stored states
     *
     * @return {Promise} promise that is resolved when OLD states [and some selected] are removed
     */
    cleanStates(removeStateId?: string): Promise<0 | void[] | undefined>;
    /**
     * Get state by id and remove stored states from the storage.
     *
     * @param {string} id unique state identifier
     * @return {Promise.<StoredState>}
     */
    getState(id: string): Promise<AuthState | null>;
    /**
     * @param {StoredToken} token
     * @return {Promise} promise that is resolved when the token is saved
     */
    saveToken(token: StoredToken): Promise<StoredToken | null>;
    /**
     * @return {Promise.<StoredToken>} promise that is resolved to the stored token
     */
    getToken(): Promise<StoredToken | null>;
    /**
     * Remove stored token if any.
     * @return {Promise} promise that is resolved when the token is wiped.
     */
    wipeToken(): Promise<void>;
    /**
     * @param {function} loadUser user loader
     * @return {Promise.<object>>} promise that is resolved to stored current user
     */
    getCachedUser(loadUser: () => Promise<AuthUser | null>): Promise<AuthUser | null>;
    /**
     * Remove cached user if any
     */
    wipeCachedCurrentUser(): Promise<void>;
    /**
     * Wipes cache if user has changed
     */
    onUserChanged(): void;
}
