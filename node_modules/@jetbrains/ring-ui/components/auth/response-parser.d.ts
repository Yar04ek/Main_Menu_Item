import ExtendableError from 'es6-error';
export interface AuthResponse {
    accessToken?: string;
    state?: string;
    token_type?: string;
    expiresIn?: string;
    scope?: string;
    error?: string | Error;
    errorDescription?: string;
    errorUri?: string;
    restoreAuthState?: string;
}
export declare class AuthError extends ExtendableError {
    code: string | Error | AuthError | undefined;
    uri: string | undefined;
    stateId: string | undefined;
    constructor(authResponse?: AuthResponse);
}
/**
 * @typedef {Object} AuthResponse
 * @property {?string} accessToken
 * @property {?string} state
 * @property {?string} token_type
 * @property {?string} expiresIn
 * @property {?string} scope
 * @property {?string} error
 */
export default class AuthResponseParser {
    readonly _authResponse: AuthResponse;
    constructor();
    static AuthError: typeof AuthError;
    static convertKey(key: string): string;
    /**
     * Check if the hash contains an access token.
     * If it does, return auth response. Otherwise return undefined.
     * Always clears the hash part of the URL.
     *
     * @throws {Error} if the auth server returned an error
     * @return {?AuthResponse}
     */
    getAuthResponseFromURL(): AuthResponse | null;
    /**
     * Validates given authResponse.
     * If it contains a token - returns the token, if an error is found - throws the error,
     * otherwise - null
     * Always clears the hash part of the URL.
     *
     * @param authResponse {AuthResponse} parsed authResponse
     * @throws {Error} if the auth server returned an error
     * @return {?AuthResponse}
     */
    validateAuthResponse(authResponse: AuthResponse): AuthResponse | null;
    /**
     * Reads the current accessToken from the URL.
     * Doesn't modify URL
     *
     * @return {AuthResponse}
     */
    readAuthResponseFromURL(): AuthResponse;
    /**
     * @return {string} part of the URL after # sign.
     * @private
     */
    getHash(): string | null;
    /**
     * Current page location.
     * @return {string}
     */
    getLocation(): string | null;
}
