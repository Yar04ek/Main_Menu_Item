import uuid from 'simply-uuid';
import AuthStorage, { AuthState } from './storage';
export interface AuthRequestBuilderConfig {
    authorization: string;
    redirectUri?: string | null | undefined;
    requestCredentials?: string | null | undefined;
    clientId?: string | null | undefined;
    scopes: readonly string[];
    redirect?: boolean | null | undefined;
}
export default class AuthRequestBuilder {
    config: AuthRequestBuilderConfig;
    storage: AuthStorage | undefined;
    /**
     * @param {{
     *   authorization: string,
     *   redirectUri: string?,
     *   requestCredentials: string?,
     *   clientId: string?,
     *   scopes: string[]
     * }} config
     * @param {AuthStorage} storage
     */
    constructor(config: AuthRequestBuilderConfig, storage?: AuthStorage);
    /**
     * @return {string} random string used for state
     */
    static _uuid: typeof uuid.generate;
    /**
     * Save state and build an auth server redirect URL.
     *
     * @param {object=} extraParams additional query parameters for auth request
     * @param {object=} extraState additional state parameters to save
     * @return {Promise.<string>} promise that is resolved to authURL
     */
    prepareAuthRequest(extraParams?: Record<string, unknown> | null | undefined, extraState?: Partial<AuthState>): Promise<{
        url: string;
        stateId: string;
    }>;
    /**
     * @param {string} id
     * @param {StoredState} storedState
     * @return {Promise}
     * @private
     */
    _saveState(id: string, storedState: AuthState): Promise<void> | undefined;
}
