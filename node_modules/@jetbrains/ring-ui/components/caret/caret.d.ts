export interface PositionParams {
    avoidFocus?: boolean | null | undefined;
}
export interface Position {
    startOffset: number;
    endOffset: number;
    position: number;
}
/**
 * @name Caret
 */
export default class Caret {
    /**
     * Line endings RegExp
     * @type {RegExp}
     */
    static returnRE: RegExp;
    /**
     * Line endings normalizer
     * Borrowed from jQuery
     * @see https://github.com/jquery/jquery/blob/master/src/attributes/val.js
     * @param value {*}
     * @return {*}
     */
    static normalizeNewlines(value: string | undefined): string | undefined;
    target: HTMLElement | HTMLInputElement;
    constructor(target: HTMLElement);
    isContentEditable(): boolean;
    /**
     * Set focus on target if possible
     */
    focus(): void;
    /**
     * Get absolute caret position index
     * @return {number}
     */
    getAbsolutePosition(node: Node): number;
    /**
     * Get caret position index
     * @param {Object} [params]
     * @param {boolean} params.avoidFocus
     * @return {number}
     */
    getPosition(params?: PositionParams): number | Position;
    /**
     * Get relative position of query
     * @param  {Node} curNode
     * @param {number} position
     * @return {{_correctedPosition: number, _curNode: Node}}
     */
    getRelativePosition(curNode: Node, position: number): {
        _curNode: Node;
        _correctedPosition: number;
    };
    /**
     * Set caret position index
     * @param  {number} position
     * @return {number}
     */
    setPosition(position?: Position | number): number | Range | undefined;
    /**
     * Get caret position in pixels
     * @return {number}
     */
    getOffset(): number;
}
