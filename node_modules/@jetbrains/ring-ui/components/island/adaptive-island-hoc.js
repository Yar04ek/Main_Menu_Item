import { jsx as _jsx } from "react/jsx-runtime";
import { Component, createContext } from 'react';
import { interpolateLinear } from '../global/linear-function';
const TITLE_RESIZE_END = 20;
const TITLE_RESIZE_THRESHOLD = 36;
export const PhaseContext = createContext(null);
export const ScrollHandlerContext = createContext(null);
export default function adaptiveIslandHOC(ComposedComponent) {
    return class AdaptiveIsland extends Component {
        state = {
            phase: null,
        };
        onContentScroll = ({ scrollTop, scrollHeight, clientHeight }) => {
            if (scrollHeight - clientHeight >=
                interpolateLinear(TITLE_RESIZE_THRESHOLD, TITLE_RESIZE_END, this.state.phase ?? 0)) {
                const phase = Math.min(1, scrollTop / TITLE_RESIZE_END);
                this.setState({ phase });
            }
        };
        render() {
            return (_jsx(PhaseContext.Provider, { value: this.state.phase, children: _jsx(ScrollHandlerContext.Provider, { value: this.onContentScroll, children: _jsx(ComposedComponent, { ...this.props }) }) }));
        }
    };
}
