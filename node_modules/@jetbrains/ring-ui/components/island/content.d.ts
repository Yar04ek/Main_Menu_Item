import { Component, HTMLAttributes } from 'react';
import createResizeDetector from 'element-resize-detector';
export interface IslandContentProps extends Omit<HTMLAttributes<HTMLElement>, 'onScroll'> {
    fade?: boolean | null | undefined;
    onScrollToBottom?: (() => void) | null | undefined;
    scrollableWrapperClassName?: string | null | undefined;
}
export interface IslandContentInnerProps extends IslandContentProps {
    onScroll: (node: HTMLElement) => void;
    bottomBorder: boolean;
}
declare class Content extends Component<IslandContentInnerProps> {
    static defaultProps: {
        fade: boolean;
        bottomBorder: boolean;
        onScroll: () => void;
        onScrollToBottom: () => void;
    };
    state: {
        scrolledToTop: boolean;
        scrolledToBottom: boolean;
    };
    componentWillUnmount(): void;
    resizeDetector: createResizeDetector.Erd;
    wrapperNode?: HTMLElement | null;
    setWrapper: (node: HTMLElement | null) => void;
    calculateScrollPosition: () => void;
    scrollableNode?: HTMLElement | null;
    setScrollableNodeAndCalculatePosition: (node: HTMLElement | null) => void;
    render(): import("react/jsx-runtime").JSX.Element;
}
declare const ContentWrapper: import("react").ForwardRefExoticComponent<IslandContentProps & import("react").RefAttributes<Content>>;
export default ContentWrapper;
