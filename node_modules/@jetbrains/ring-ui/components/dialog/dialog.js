import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { createRef, PureComponent } from 'react';
import { createPortal } from 'react-dom';
import classNames from 'classnames';
import closeIcon from '@jetbrains/icons/close';
import { AdaptiveIsland } from '../island/island';
import getUID from '../global/get-uid';
import dataTests from '../global/data-tests';
import Shortcuts from '../shortcuts/shortcuts';
import TabTrap from '../tab-trap/tab-trap';
import Button from '../button/button';
import { PopupTarget, PopupTargetContext } from '../popup/popup.target';
import { getPopupContainer } from '../popup/popup';
import { preventerFactory as scrollPreventerFactory } from './dialog__body-scroll-preventer';
import styles from './dialog.css';
/**
 * @name Dialog
 */
function noop() { }
export default class Dialog extends PureComponent {
    static defaultProps = {
        label: 'Dialog',
        onOverlayClick: noop,
        onEscPress: noop,
        onCloseClick: noop,
        onCloseAttempt: noop,
        showCloseButton: false,
        closeButtonInside: false,
        shortcutOptions: { modal: false },
        trapFocus: false,
        autoFocusFirst: true,
        modal: true,
        preventBodyScroll: true,
    };
    state = {
        shortcutsScope: getUID('ring-dialog-'),
    };
    componentDidMount() {
        const { show, native } = this.props;
        if (native && show) {
            this.toggleNativeDialog();
        }
        this.toggleScrollPreventer();
    }
    componentDidUpdate(prevProps) {
        const { show, native } = this.props;
        if (native && show !== prevProps.show) {
            this.toggleNativeDialog();
        }
        if (prevProps.show !== this.props.show) {
            this.toggleScrollPreventer();
        }
    }
    componentWillUnmount() {
        this.scrollPreventer.reset();
    }
    scrollPreventer = scrollPreventerFactory(getUID('preventer-'));
    uid = getUID('dialog-');
    toggleNativeDialog() {
        const { show, modal } = this.props;
        if (this.nativeDialog.current != null) {
            if (show) {
                this.nativeDialog.current.removeAttribute('open');
                if (modal) {
                    this.nativeDialog.current.showModal();
                }
                else {
                    this.nativeDialog.current.show();
                }
            }
            else {
                this.nativeDialog.current.close();
            }
        }
    }
    toggleScrollPreventer() {
        if (!this.props.preventBodyScroll) {
            return;
        }
        if (this.props.show) {
            this.scrollPreventer.prevent();
        }
        else {
            this.scrollPreventer.reset();
        }
    }
    handleClick = (event) => {
        this.props.onOverlayClick(event);
        this.props.onCloseAttempt(event);
    };
    onCloseClick = (event) => {
        this.props.onCloseClick(event);
        this.props.onCloseAttempt(event);
    };
    getShortcutsMap = () => {
        const onEscape = (event) => {
            if (this.props.show) {
                this.props.onEscPress(event);
                this.props.onCloseAttempt(event);
            }
        };
        return {
            esc: onEscape,
        };
    };
    dialog;
    dialogRef = (tabTrap) => {
        this.dialog = tabTrap && tabTrap.node;
    };
    nativeDialog = createRef();
    render() {
        const { show, showCloseButton, onOverlayClick, onCloseAttempt, onEscPress, onCloseClick, children, className, contentClassName, trapFocus, 'data-test': dataTest, closeButtonInside, portalTarget, label, closeButtonTitle, dense, shortcutOptions, native, modal, preventBodyScroll, ...restProps } = this.props;
        const classes = classNames(styles.container, className);
        const shortcutsMap = this.getShortcutsMap();
        const content = (_jsxs(_Fragment, { children: [_jsx(Shortcuts, { map: shortcutsMap, scope: this.state.shortcutsScope, options: this.props.shortcutOptions }), (onOverlayClick !== noop || onCloseAttempt !== noop) && (_jsx("div", { 
                    // click handler is duplicated in close button
                    role: "presentation", className: styles.clickableOverlay, onClick: this.handleClick, "data-test": "ring-dialog-overlay" })), _jsx("div", { className: styles.innerContainer, children: _jsxs(AdaptiveIsland, { className: classNames(styles.content, contentClassName, {
                            [styles.dense]: dense,
                        }), "data-test": "ring-dialog", role: "dialog", "aria-label": label, children: [children, showCloseButton && (_jsx(Button, { icon: closeIcon, "data-test": "ring-dialog-close-button", className: classNames(styles.closeButton, {
                                    [styles.closeButtonOutside]: !closeButtonInside,
                                    [styles.closeButtonInside]: closeButtonInside,
                                }), iconClassName: classNames(styles.closeIcon, {
                                    [styles.closeIconOutside]: !closeButtonInside,
                                    [styles.closeIconInside]: closeButtonInside,
                                }), onClick: this.onCloseClick, title: closeButtonTitle, "aria-label": closeButtonTitle || 'close dialog' }))] }) })] }));
        if (native) {
            return (_jsx("dialog", { className: classNames(styles.nativeDialog, className), ref: this.nativeDialog, children: _jsx(PopupTarget, { id: this.uid, className: styles.popupTarget, children: target => (_jsxs(_Fragment, { children: [content, target] })) }) }));
        }
        return (show && (_jsx(PopupTargetContext.Consumer, { children: contextTarget => {
                let targetElement = document.body;
                if (portalTarget instanceof HTMLElement) {
                    targetElement = portalTarget;
                }
                else if (contextTarget != null) {
                    const container = getPopupContainer(contextTarget);
                    if (container != null) {
                        targetElement = container;
                    }
                }
                return createPortal(_jsx(PopupTarget, { id: this.uid, className: styles.popupTarget, children: target => (_jsxs(TabTrap, { trapDisabled: !trapFocus, "data-test": dataTests('ring-dialog-container', dataTest), ref: this.dialogRef, className: classes, role: "presentation", ...restProps, children: [content, target] })) }), targetElement);
            } })));
    }
}
