import { PureComponent } from 'react';
import * as React from 'react';
import TabTrap, { TabTrapProps } from '../tab-trap/tab-trap';
import type { ShortcutsScopeOptions } from '../shortcuts/core';
export interface DialogProps extends Partial<TabTrapProps> {
    show: boolean;
    label: string;
    onOverlayClick: (event: React.MouseEvent<HTMLElement>) => void;
    onEscPress: (event: KeyboardEvent) => void;
    onCloseClick: (event: React.MouseEvent<HTMLElement>) => void;
    onCloseAttempt: (event: React.MouseEvent<HTMLElement> | KeyboardEvent) => void;
    showCloseButton: boolean;
    shortcutOptions: ShortcutsScopeOptions;
    closeButtonInside: boolean;
    closeButtonTitle?: string;
    trapFocus: boolean;
    contentClassName?: string | null | undefined;
    portalTarget?: Element | null | undefined;
    'data-test'?: string | null | undefined;
    dense?: boolean | null | undefined;
    native?: boolean;
    modal?: boolean;
    preventBodyScroll?: boolean;
}
export default class Dialog extends PureComponent<DialogProps> {
    static defaultProps: Partial<DialogProps>;
    state: {
        shortcutsScope: string;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: DialogProps): void;
    componentWillUnmount(): void;
    scrollPreventer: {
        prevent: () => void;
        reset: () => void;
    };
    uid: string;
    toggleNativeDialog(): void;
    toggleScrollPreventer(): void;
    handleClick: (event: React.MouseEvent<HTMLElement>) => void;
    onCloseClick: (event: React.MouseEvent<HTMLElement>) => void;
    getShortcutsMap: () => {
        esc: (event: KeyboardEvent) => void;
    };
    dialog?: HTMLElement | null;
    dialogRef: (tabTrap: TabTrap | null) => void;
    nativeDialog: React.RefObject<HTMLDialogElement>;
    render(): false | import("react/jsx-runtime").JSX.Element;
}
export type DialogAttrs = React.JSX.LibraryManagedAttributes<typeof Dialog, DialogProps>;
