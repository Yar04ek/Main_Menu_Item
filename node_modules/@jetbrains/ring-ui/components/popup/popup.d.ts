/**
 * @name Popup
 */
import { PureComponent, ReactNode, CSSProperties, SyntheticEvent } from 'react';
import * as React from 'react';
import { Listeners } from '../global/dom';
import { PositionStyles } from './position';
import { Dimension, Directions, Display, MaxHeight, MinWidth } from './popup.consts';
import { PopupTargetContext, PopupTarget } from './popup.target';
export { PopupTargetContext, PopupTarget };
export declare const getPopupContainer: (target: string | Element) => Element | null;
export interface BasePopupProps {
    hidden: boolean;
    onOutsideClick: (e: PointerEvent) => void;
    onEscPress: (e: KeyboardEvent) => void;
    onCloseAttempt: (e?: Event | SyntheticEvent, isEsc?: boolean | undefined) => void;
    dontCloseOnAnchorClick: boolean;
    shortcuts: boolean;
    keepMounted: boolean;
    directions: readonly Directions[];
    autoPositioning: boolean;
    autoPositioningOnScroll: boolean;
    autoCorrectTopOverflow: boolean;
    left: number;
    top: number;
    sidePadding: number;
    attached: boolean;
    trapFocus: boolean;
    autoFocusFirst: boolean;
    offset: number;
    legacy: boolean;
    withTail?: boolean;
    tailOffset?: number;
    largeBorderRadius?: boolean;
    anchorElement?: HTMLElement | null | undefined;
    target?: string | Element | null | undefined;
    className?: string | null | undefined;
    style?: CSSProperties | undefined;
    'data-test'?: string | null | undefined;
    client?: boolean | null | undefined;
    maxHeight?: number | 'screen' | null | undefined;
    minWidth?: number | 'target' | null | undefined;
    onMouseDown?: ((e: React.MouseEvent<HTMLElement>) => void) | undefined;
    onMouseUp?: ((e: React.MouseEvent<HTMLElement>) => void) | undefined;
    onMouseOver?: ((e: React.SyntheticEvent<HTMLElement>) => void) | undefined;
    onMouseOut?: ((e: React.SyntheticEvent<HTMLElement>) => void) | undefined;
    onContextMenu?: ((e: React.MouseEvent<HTMLElement>) => void) | undefined;
    onDirectionChange?: ((direction: Directions) => void) | null | undefined;
    onShow?: (() => void) | null | undefined;
    children?: ReactNode;
}
export interface PopupProps extends BasePopupProps {
    children: ReactNode;
}
interface PopupState {
    display: Display;
    client?: boolean;
    direction?: Directions;
}
/**
 * @constructor
 * @name Popup
 * @extends {ReactComponent}
 */
export default class Popup<P extends BasePopupProps = PopupProps> extends PureComponent<P, PopupState> {
    static defaultProps: {
        shortcuts: boolean;
        hidden: boolean;
        onOutsideClick(): void;
        onEscPress(): void;
        onCloseAttempt(): void;
        dontCloseOnAnchorClick: boolean;
        keepMounted: boolean;
        directions: Directions[];
        autoPositioning: boolean;
        autoPositioningOnScroll: boolean;
        autoCorrectTopOverflow: boolean;
        left: number;
        top: number;
        offset: number;
        sidePadding: number;
        attached: boolean;
        trapFocus: boolean;
        autoFocusFirst: boolean;
        legacy: boolean;
    };
    state: PopupState;
    componentDidMount(): void;
    componentDidUpdate(prevProps: BasePopupProps, prevState: PopupState): void;
    componentWillUnmount(): void;
    popup?: HTMLElement | null;
    node?: HTMLElement | null;
    parent?: HTMLElement | null;
    container?: HTMLElement | null;
    ringPopupTarget?: string | Element;
    shouldUseShortcuts(): boolean;
    listeners: Listeners;
    redrawScheduler: (cb: () => void) => void;
    uid: string;
    calculateDisplay: (prevState: PopupState) => {
        display: Display;
        client?: boolean;
        direction?: Directions;
    };
    static PopupProps: {
        Directions: typeof Directions;
        Dimension: typeof Dimension;
        MinWidth: typeof MinWidth;
        MaxHeight: typeof MaxHeight;
    };
    portalRef: (el: HTMLElement | null) => void;
    popupRef: (el: HTMLElement | null) => void;
    containerRef: (el: HTMLElement | null) => void;
    getContainer(): "" | Element | null | undefined;
    position(): {
        styles: PositionStyles;
        direction: Directions | null;
    };
    private _updateDirection;
    private _updatePosition;
    private _redraw;
    private _getAnchor;
    private _listenersEnabled?;
    private _prevTimeout?;
    /**
     * @param {boolean} enable
     * @private
     */
    private _setListenersEnabled;
    /**
     * Returns visibility state
     * @return {boolean}
     */
    isVisible(): boolean;
    _onCloseAttempt(evt?: Event | SyntheticEvent, isEsc?: boolean): void;
    private _onEscPress;
    /**
     * @param {jQuery.Event} evt
     * @private
     */
    private _onDocumentClick;
    getInternalContent(): import("react/jsx-runtime").JSX.Element | P["children"] | undefined;
    shortcutsScope: string;
    shortcutsMap: {
        esc: (evt: KeyboardEvent) => void;
    };
    render(): import("react/jsx-runtime").JSX.Element;
}
export type PopupAttrs = React.JSX.LibraryManagedAttributes<typeof Popup, PopupProps>;
export type BasePopupAttrs = React.JSX.LibraryManagedAttributes<typeof Popup, BasePopupProps>;
