import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import List from '../list/list';
import styles from './query-assist.css';
const ICON_ID_LENGTH = 44;
export default class QueryAssistSuggestions {
    /*
     * Pay attention that this method produces not a 100% unique key.
     * Consider to use a unique identifier provided by a server.
     */
    static createKey(suggestion) {
        const { description, group, icon, option, prefix = '', suffix = '' } = suggestion;
        return prefix + option + suffix + group + description + (icon ? icon.substring(icon.length - ICON_ID_LENGTH) : '');
    }
    static renderLabel(suggestion) {
        const { className, matchingStart = 0, matchingEnd = 0, option, prefix = '', suffix = '' } = suggestion;
        let wrappedOption;
        let before = '';
        let after = '';
        if (matchingStart !== matchingEnd) {
            before = option.substring(0, matchingStart);
            wrappedOption = _jsx("span", { className: styles.highlight, children: option.substring(matchingStart, matchingEnd) });
            after = option.substring(matchingEnd);
        }
        else {
            wrappedOption = option;
        }
        const wrappedPrefix = prefix && _jsx("span", { className: styles.service, children: prefix });
        const wrappedSuffix = suffix && _jsx("span", { className: styles.service, children: suffix });
        return (_jsxs("span", { className: className, children: [wrappedPrefix, before, wrappedOption, after, wrappedSuffix] }));
    }
    static renderGroupSeparator(suggestion, prevSuggestion) {
        const { group, option } = suggestion;
        const { SEPARATOR } = List.ListProps.Type;
        if (prevSuggestion !== group) {
            return {
                key: option + group + SEPARATOR,
                description: group,
                rgItemType: SEPARATOR,
            };
        }
        return null;
    }
    static renderList(suggestions, suggestionRenderer) {
        const renderedSuggestions = [];
        suggestions.forEach((suggestion, index, arr) => {
            const prevSuggestionGroup = arr[index - 1] && arr[index - 1].group;
            const groupSeparator = QueryAssistSuggestions.renderGroupSeparator(suggestion, prevSuggestionGroup);
            if (groupSeparator) {
                renderedSuggestions.push(groupSeparator);
            }
            renderedSuggestions.push(suggestionRenderer(suggestion));
        });
        return renderedSuggestions;
    }
}
