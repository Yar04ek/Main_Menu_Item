import { Component, ComponentRef, ReactNode, SyntheticEvent } from 'react';
import * as React from 'react';
import Caret, { Position } from '../caret/caret';
import PopupMenu from '../popup-menu/popup-menu';
import Button from '../button/button';
import Icon from '../icon/icon';
import { Size } from '../input/input';
import { ShortcutsMap } from '../shortcuts/core';
import { QueryAssistSuggestion, SuggestionItem } from './query-assist__suggestions';
declare function noop(): void;
export interface QueryAssistTranslations {
    searchTitle: string;
    clearTitle: string;
}
export interface FocusChange {
    focus: boolean;
}
export interface QueryAssistChange {
    query: string;
    prevCaret?: number | null;
    caret: number;
    focus?: boolean;
    selection?: Position | number | null;
    dirty?: boolean;
    suggestionsQuery?: string;
}
export interface QueryAssistResponse {
    query?: string | undefined;
    caret?: number | undefined;
    styleRanges?: readonly StyleRange[] | undefined;
    suggestions?: readonly QueryAssistSuggestion[] | undefined;
}
export interface QueryAssistRequestParams {
    query: string;
    caret: number;
    omitSuggestions?: boolean;
}
export interface QueryAssistProps {
    /**
     * Called when the query is applied. An object with fields `caret`, `focus` and `query` is passed as an argument
     */
    onApply: (change: QueryAssistChange) => void;
    /**
     * Called when the query is changed. An object with fields `caret` and `query` is passed as an argument
     */
    onChange: (change: QueryAssistChange) => void;
    /**
     * Called when the suggestion is applied
     */
    onApplySuggestion: (suggestion: QueryAssistSuggestion, change: QueryAssistChange) => void;
    /**
     * Called when the query is cleared. Called without arguments
     */
    onClear: () => void;
    /**
     * Called when the focus status is changed. An object with fields `focus` is passed as an argument
     */
    onFocusChange: (change: FocusChange) => void;
    translations?: QueryAssistTranslations | null | undefined;
    /**
     * Open suggestions popup during the initial render
     */
    autoOpen?: boolean | null | undefined | 'force';
    /**
     * Initial caret position
     */
    caret?: number | null | undefined;
    /**
     * Show clickable "cross" icon on the right which clears the query
     */
    clear?: boolean | null | undefined;
    /**
     * Additional class for the component
     */
    className?: string | null | undefined;
    /**
     * Additional class for the popup
     */
    popupClassName?: string | null | undefined;
    /**
     * Additional class for the input
     */
    inputClassName?: string | null | undefined;
    /**
     * Data source function
     */
    dataSource: (params: QueryAssistRequestParams) => Promise<QueryAssistResponse> | QueryAssistResponse;
    /**
     * Input debounce delay
     */
    delay?: number | null | undefined;
    /**
     * Disable the component
     */
    disabled?: boolean | undefined;
    /**
     * Initial focus
     */
    focus?: boolean | null | undefined;
    /**
     * Hint under the suggestions list
     */
    hint?: string | null | undefined;
    /**
     * Hint under the suggestions list visible when a suggestion is selected
     */
    hintOnSelection?: string | null | undefined;
    /**
     * Show clickable "glass" icon on the right which applies the query
     */
    glass?: boolean | null | undefined;
    /**
     * Show loader when a data request is in process
     */
    loader?: boolean | null | undefined;
    /**
     * Field placeholder value
     */
    placeholder?: string | null | undefined;
    /**
     * Initial query
     */
    query?: string | null | undefined;
    useCustomItemRender?: boolean | null | undefined;
    actions?: ReactNode[] | null | undefined;
    'data-test'?: string | null | undefined;
    huge?: boolean | null | undefined;
    size: Size;
}
export interface StyleRange {
    style: string;
    start: number;
    length: number;
}
interface QueryAssistState {
    dirty: boolean | undefined;
    query: string | null | undefined;
    placeholderEnabled: boolean;
    shortcuts?: boolean;
    suggestions: readonly QueryAssistSuggestion[];
    showPopup: boolean;
    prevQuery?: string | null | undefined;
    loading?: boolean;
    styleRanges?: readonly StyleRange[];
}
interface CaretPositionParams {
    fromContentEditable?: boolean | null | undefined;
    forceSetCaret?: boolean | null | undefined;
}
interface HistoryEntry {
    query: string | null | undefined;
    caret: Position | number;
}
/**
 * @name Query Assist
 */
/**
 * ## Data source function

 Component class calls a data source function when user input happens and passes an object with fields \`caret\`, \`focus\` and \`query\` as the only argument.
 The function must return an object with the fields described below. The object can be optionally wrapped in a Promise.

 ### Return object fields

 \`caret\` and \`query\` should just return server values provided to data source function.
 These fields allow the Query Assist component to recognise and drop earlier responses from the server.

 + __caret__ (\`string=0\`) Caret from request
 + __query__ (\`string=''\`) Query from request
 + __styleRanges__ (\`Array<suggestion>=\`) Array of \`styleRange\` objects, used to highlight the request in the input field
 + __suggestions__ (\`Array<styleRange>\`) Array of \`suggestion\` objects to show.

 ### **styleRange** object fields

 start \`number\` Range start (in characters)
 length \`number\` Range length (in characters)
 style \`string\` Style of the range. Possible values: \`text\`, \`field_value\`, \`field_name\`, \`operator\`

 ### **suggestion** object fields

 + __prefix__ \`string=\` Suggestion option prefix
 + __option__ \`string\` Suggestion option
 + __suffix__ \`string=\` Suggestion option suffix
 + __description__ \`string=\` Suggestion option description. Is not visible when a group is set
 + __matchingStart__ \`number\` (required when matchingEnd is set) Start of the highlighted part of an option in the suggestions list (in characters)
 + __matchingEnd__ \`number\` (required when matchingEnd is set) End of the highlighted part of an option in the suggestions list (in characters)
 + __caret__ \`number\` Caret position after option completion (in characters)
 + __completionStart__ \`number\` Where to start insertion (or replacement, when completing with the \`Tab\` key) of the completion option (in characters)
 + __completionEnd__ \`number\` Where to end insertion of the completion option (in characters)
 + __group__ \`string=\` Group title. Options with the same title are grouped under it
 + __icon__ \`string=\` Icon URI, Data URI is possible
 */
export default class QueryAssist extends Component<QueryAssistProps> {
    static defaultProps: {
        onApply: typeof noop;
        onChange: typeof noop;
        onApplySuggestion: typeof noop;
        onClear: typeof noop;
        onFocusChange: typeof noop;
        size: Size;
    };
    static getDerivedStateFromProps({ query }: QueryAssistProps, { prevQuery }: QueryAssistState): Partial<QueryAssistState>;
    constructor(props: QueryAssistProps);
    state: QueryAssistState;
    componentDidMount(): void;
    shouldComponentUpdate(props: QueryAssistProps, state: QueryAssistState): boolean;
    componentDidUpdate(prevProps: QueryAssistProps): void;
    static ngModelStateField: string;
    immediateState: QueryAssistChange;
    requestData?: (afterCompletion?: boolean) => void;
    ngModelStateField: string;
    historyStack: HistoryEntry[];
    mouseIsDownOnPopup?: boolean;
    handleFocusChange: (e: SyntheticEvent) => void;
    node?: HTMLElement | null;
    nodeRef: (node: HTMLElement | null) => void;
    updateFocus({ focus, caret }: QueryAssistProps): void;
    setCaretPosition: (params?: CaretPositionParams) => void;
    scrollInput(): void;
    getQuery(): string;
    isRenderingGlassOrLoader(): boolean | undefined;
    togglePlaceholder: () => void;
    isComposing?: boolean;
    handleInput: (e: Event | SyntheticEvent) => void;
    handleEnter: (e: React.KeyboardEvent) => void;
    handleTab: (e: Event) => boolean | void;
    setState: (state: Partial<QueryAssistState>, resolve?: () => void) => void;
    private _pushHistory;
    undo: (e: Event) => void;
    handlePaste: (e: React.ClipboardEvent) => void;
    handleCaretMove: (e: Event | SyntheticEvent) => void;
    handleStyleRangesResponse: ({ suggestions, ...restProps }: QueryAssistResponse) => Promise<void>;
    handleResponse: ({ query, caret, styleRanges, suggestions }: QueryAssistResponse, afterCompletion?: boolean) => Promise<void>;
    handleApply: () => void;
    handleComplete: (data?: SuggestionItem, replace?: boolean) => void;
    requestStyleRanges: () => Promise<void>;
    requestHandler: (afterCompletion?: boolean) => Promise<void>;
    sendRequest(params: QueryAssistRequestParams): Promise<QueryAssistResponse>;
    getPopupOffset(suggestions: readonly QueryAssistSuggestion[]): number;
    handleCtrlSpace: (e: Event) => void;
    trackPopupMouseState: (e: SyntheticEvent) => void;
    trackCompositionState: (e: SyntheticEvent) => void;
    closePopup: () => void;
    clearQuery: () => void;
    blurInput(): void;
    /**
     * Optionally setup data request delay. For each component create a separate
     * instance of the delayed function. This may help reduce the load on the server
     * when the user quickly inputs data.
     */
    setupRequestHandler(delay?: number | null): void;
    private _renderSuggestion;
    renderSuggestions(): import("../list/consts").ListDataItem<SuggestionItem>[];
    renderQuery(): "" | import("react/jsx-runtime").JSX.Element[] | null | undefined;
    setFocus(focus: boolean | null | undefined): void;
    input?: HTMLElement | null;
    caret?: Caret;
    inputRef: (node: HTMLElement | null) => void;
    _popup?: PopupMenu<SuggestionItem> | null;
    popupRef: (node: PopupMenu<SuggestionItem> | null) => void;
    placeholder?: HTMLElement | null;
    placeholderRef: (node: HTMLElement | null) => void;
    glass?: ComponentRef<typeof Icon> | null;
    glassRef: (node: ComponentRef<typeof Icon> | null) => void;
    loader?: HTMLElement | null;
    loaderRef: (node: HTMLElement | null) => void;
    clear?: ComponentRef<typeof Button> | null;
    clearRef: (node: ComponentRef<typeof Button> | null) => void;
    shortcutsScope: string;
    shortcutsMap: ShortcutsMap;
    listShortcutsMap: ShortcutsMap;
    renderActions(): ReactNode[];
    render(): import("react/jsx-runtime").JSX.Element;
}
export type QueryAssistAttrs = React.JSX.LibraryManagedAttributes<typeof QueryAssist, QueryAssistProps>;
export declare const RerenderableQueryAssist: React.ForwardRefExoticComponent<QueryAssistProps & React.RefAttributes<QueryAssist>>;
export {};
