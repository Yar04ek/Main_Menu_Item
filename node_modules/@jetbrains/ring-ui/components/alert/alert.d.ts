import { PureComponent, ReactNode } from 'react';
import * as React from 'react';
import Theme from '../global/theme';
export declare const ANIMATION_TIME = 500;
/**
 * @name Alert
 */
/**
 * List of available alert types.
 * @enum {string}
 */
export declare enum AlertType {
    ERROR = "error",
    MESSAGE = "message",
    SUCCESS = "success",
    WARNING = "warning",
    LOADING = "loading"
}
export interface AlertProps {
    theme: Theme;
    timeout: number;
    /**
     * Fires when alert starts closing if timeout is out or user clicks "Close" button
     */
    onCloseRequest: (event?: React.MouseEvent<HTMLElement>) => void;
    onClose: () => void;
    isShaking: boolean;
    isClosing: boolean;
    /**
     * Whether an alert is rendered inside an **Alerts** container
     * or standalone.
     */
    inline: boolean;
    showWithAnimation: boolean;
    closeable: boolean;
    type: AlertType;
    children?: ReactNode;
    className?: string | null | undefined;
    captionClassName?: string | null | undefined;
    closeButtonClassName?: string | null | undefined;
    'data-test'?: string | null | undefined;
}
interface State {
    height: number | null;
}
/**
 * @constructor
 * @name Alert
 * @extends {ReactComponent}
 */
/**
 * **Alert** is a component for displaying contextual notifications. If you want to display a stack of notifications, use **Alerts** instead.
 */
export default class Alert extends PureComponent<AlertProps, State> {
    /** @override */
    static defaultProps: {
        theme: Theme;
        closeable: boolean;
        showWithAnimation: boolean;
        type: AlertType;
        inline: boolean;
        isClosing: boolean;
        isShaking: boolean;
        timeout: number;
        onClose: () => void;
        onCloseRequest: () => void;
    };
    state: {
        height: null;
    };
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    node?: HTMLDivElement | null;
    hideTimeout?: number;
    static Type: typeof AlertType;
    closeRequest: (event: React.MouseEvent<HTMLElement>) => void;
    startCloseAnimation: () => void;
    private _close;
    /**
     * @param {SyntheticEvent} evt
     * @private
     */
    private _handleCaptionsLinksClick;
    /**
     * @private
     */
    private _getCaption;
    /**
     * @private
     * @return {XML|string}
     */
    private _getIcon;
    storeAlertRef: (node: HTMLDivElement | null) => void;
    render(): import("react/jsx-runtime").JSX.Element;
}
export { default as Container } from './container';
