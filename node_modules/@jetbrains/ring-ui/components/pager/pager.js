import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * @name Pager
 */
import { PureComponent } from 'react';
import classNames from 'classnames';
import chevronLeftIcon from '@jetbrains/icons/chevron-left';
import chevronRightIcon from '@jetbrains/icons/chevron-right';
import Button from '../button/button';
import ButtonGroup from '../button-group/button-group';
import ButtonToolbar from '../button-toolbar/button-toolbar';
import Select from '../select/select';
import memoize from '../global/memoize';
import Link from '../link/link';
import Icon from '../icon/icon';
import { I18nContext } from '../i18n/i18n-context';
import style from './pager.css';
export default class Pager extends PureComponent {
    static defaultProps = {
        currentPage: 1,
        pageSize: 50,
        // eslint-disable-next-line @typescript-eslint/no-magic-numbers
        pageSizes: [20, 50, 100],
        visiblePagesLimit: 7,
        disablePageSizeSelector: false,
        openTotal: false,
        canLoadLastPageWithOpenTotal: false,
        loader: false,
        loaderNavigation: false,
        onPageSizeChange: () => { },
        onLoadPage: () => { },
    };
    static contextType = I18nContext;
    getSelectOptions() {
        const { pageSize, pageSizes } = this.props;
        const { translate } = this.context;
        const data = pageSizes.map(size => ({
            key: size,
            label: `${size} ${this.props.translations?.perPage ?? translate('perPage')}`,
        }));
        const selected = data.find(it => it.key === pageSize);
        return { selected, data };
    }
    getTotalPages() {
        const { total, pageSize } = this.props;
        return Math.ceil(total / pageSize);
    }
    handlePageSizeChange = (item) => {
        if (item != null) {
            this.props.onPageSizeChange(item.key);
        }
    };
    handlePrevClick = () => {
        const { currentPage } = this.props;
        if (currentPage !== 1) {
            const prevPage = currentPage - 1;
            this.props.onPageChange?.(prevPage);
        }
    };
    handleNextClick = () => {
        const { currentPage, onLoadPage } = this.props;
        const nextPage = currentPage + 1;
        const total = this.getTotalPages();
        if (currentPage !== total) {
            this.props.onPageChange?.(nextPage);
        }
        else if (this.props.openTotal) {
            onLoadPage(nextPage);
        }
    };
    handlePageChange = memoize((i) => (event) => {
        this.props.onPageChange?.(i, event);
    });
    handleLoadMore = memoize((i) => () => {
        this.props.onLoadPage(i);
    });
    getButton(page, content, key, active) {
        return (_jsx(Button, { href: this.generateHref(page), active: active, disabled: this.props.loader && !active && !this.props.loaderNavigation, loader: this.props.loader && active, ...this.getClickProps(this.handlePageChange(page)), children: content }, key));
    }
    getClickProps(onClick) {
        const { hrefFunc, onPageChange } = this.props;
        if (!onPageChange) {
            return {};
        }
        else if (hrefFunc) {
            return { onPlainLeftClick: onClick };
        }
        else {
            return { onClick };
        }
    }
    getPageSizeSelector() {
        const selectOptions = this.getSelectOptions();
        return (!this.props.disablePageSizeSelector && (_jsx("div", { "data-test": "ring-pager-page-size-selector", className: style.pageSize, children: _jsx(Select, { data: selectOptions.data, selected: selectOptions.selected, onSelect: this.handlePageSizeChange, type: Select.Type.INLINE, disabled: this.props.loader }) })));
    }
    getPagerLinks() {
        const { translate } = this.context;
        const prevLinkAvailable = this.props.currentPage !== 1;
        const nextLinkAvailable = this.props.openTotal || this.props.currentPage !== this.getTotalPages();
        const nextIcon = _jsx(Icon, { glyph: chevronRightIcon }, "icon");
        const prevIcon = _jsx(Icon, { glyph: chevronLeftIcon }, "icon");
        const prevText = this.props.translations?.previousPage ?? translate('previousPage');
        const nextText = this.props.translations?.nextPage ?? translate('nextPage');
        const nextLinkContent = [_jsx("span", { children: nextText }, "text"), nextIcon];
        const prevLinkContent = [prevIcon, _jsx("span", { children: prevText }, "text")];
        const prevLinkHref = this.generateHref(this.props.currentPage - 1);
        const nextLinkHref = this.generateHref(this.props.currentPage + 1);
        const disabledLinkClasses = classNames({
            [style.link]: true,
            [style.linkDisabled]: true,
        });
        return (_jsxs("div", { className: style.links, children: [prevLinkAvailable && (!this.props.loader || this.props.loaderNavigation) ? (_jsx(Link, { href: prevLinkHref, className: style.link, ...this.getClickProps(this.handlePrevClick), children: prevLinkContent })) : (_jsxs("span", { className: disabledLinkClasses, children: [prevIcon, _jsx("span", { children: prevText }, "text")] })), nextLinkAvailable && (!this.props.loader || this.props.loaderNavigation) ? (_jsx(Link, { href: nextLinkHref, className: style.link, ...this.getClickProps(this.handleNextClick), children: nextLinkContent })) : (_jsxs("span", { className: disabledLinkClasses, children: [_jsx("span", { children: nextText }, "text"), nextIcon] }))] }));
    }
    generateHref(page) {
        if (this.props.hrefFunc === undefined) {
            return undefined;
        }
        const pageSize = this.props.disablePageSizeSelector ? undefined : this.props.pageSize;
        return this.props.hrefFunc(page, pageSize);
    }
    getPagerContent() {
        const { currentPage, visiblePagesLimit } = this.props;
        const totalPages = this.getTotalPages();
        const { translate } = this.context;
        if (totalPages < this.props.currentPage) {
            this.props.onPageChange?.(totalPages);
        }
        let start = 1;
        let end = totalPages;
        if (totalPages >= visiblePagesLimit) {
            const leftHalfFrameSize = Math.ceil(visiblePagesLimit / 2) - 1;
            const rightHalfFrameSize = visiblePagesLimit - leftHalfFrameSize - 1;
            start = currentPage - leftHalfFrameSize;
            end = currentPage + rightHalfFrameSize;
            if (start < 1) {
                const tail = 1 - start;
                start += tail;
                end += tail;
            }
            if (end > totalPages) {
                const tail = end - totalPages;
                start -= tail;
                end -= tail;
            }
            if (start < 1) {
                start += 1 - start;
            }
        }
        const buttons = [];
        for (let i = start; i <= end; i++) {
            buttons.push(this.getButton(i, i, i, i === currentPage));
        }
        const lastPageButtonAvailable = (!this.props.disableLastPageButton && end < totalPages && !this.props.openTotal) ||
            (this.props.openTotal && this.props.canLoadLastPageWithOpenTotal);
        return (_jsxs("div", { children: [this.getPagerLinks(), _jsxs("div", { className: style.actions, children: [_jsxs(ButtonToolbar, { children: [start > 1 && this.getButton(1, this.props.translations?.firstPage ?? translate('firstPage')), _jsxs(ButtonGroup, { children: [start > 1 && this.getButton(start - 1, '...'), buttons, end < totalPages && this.getButton(end + 1, '...'), end === totalPages && this.props.openTotal && (_jsx(Button, { href: this.generateHref(end + 1), disabled: this.props.loader, ...this.getClickProps(this.handleLoadMore(end + 1)), children: '...' }))] }), lastPageButtonAvailable &&
                                    this.getButton(this.props.openTotal ? -1 : totalPages, this.props.translations?.lastPage ?? translate('lastPage'))] }), this.getPageSizeSelector()] })] }));
    }
    render() {
        const classes = classNames(style.pager, this.props.className);
        return (_jsx("div", { "data-test": "ring-pager", className: classes, children: this.getTotalPages() > 1 || this.props.openTotal ? this.getPagerContent() : this.getPageSizeSelector() }));
    }
}
