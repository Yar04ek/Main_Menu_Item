/**
 * @name Pager
 */
import { PureComponent, ReactNode } from 'react';
import * as React from 'react';
import { SelectItem } from '../select/select';
export interface PagerTranslations {
    perPage: string;
    firstPage: string;
    lastPage: string;
    nextPage: string;
    previousPage: string;
}
export interface PagerProps {
    total: number;
    currentPage: number;
    pageSize: number;
    pageSizes: readonly number[];
    visiblePagesLimit: number;
    disablePageSizeSelector: boolean;
    openTotal: boolean;
    canLoadLastPageWithOpenTotal: boolean;
    translations?: PagerTranslations | null | undefined;
    loader: boolean;
    loaderNavigation: boolean;
    onPageSizeChange: (size: number) => void;
    onLoadPage: (nextPage: number) => void;
    onPageChange?: ((prevPage: number, event?: React.MouseEvent) => void) | null | undefined;
    className?: string | null | undefined;
    hrefFunc?: ((page: number, pageSize: number | undefined) => string) | undefined;
    disableLastPageButton?: boolean;
}
interface PagerSizeItem {
    key: number;
}
export default class Pager extends PureComponent<PagerProps> {
    static defaultProps: {
        currentPage: number;
        pageSize: number;
        pageSizes: number[];
        visiblePagesLimit: number;
        disablePageSizeSelector: boolean;
        openTotal: boolean;
        canLoadLastPageWithOpenTotal: boolean;
        loader: boolean;
        loaderNavigation: boolean;
        onPageSizeChange: () => void;
        onLoadPage: () => void;
    };
    static contextType: React.Context<import("../i18n/i18n-context").I18nContextProps>;
    context: React.ContextType<typeof Pager.contextType>;
    getSelectOptions(): {
        selected: SelectItem<PagerSizeItem> | undefined;
        data: SelectItem<PagerSizeItem>[];
    };
    getTotalPages(): number;
    handlePageSizeChange: (item: PagerSizeItem | null) => void;
    handlePrevClick: () => void;
    handleNextClick: () => void;
    handlePageChange: (arg: number) => (event: React.MouseEvent) => void;
    handleLoadMore: (arg: number) => () => void;
    getButton(page: number, content: ReactNode, key?: number, active?: boolean): import("react/jsx-runtime").JSX.Element;
    getClickProps(onClick: (e: React.MouseEvent) => void): {
        onPlainLeftClick?: undefined;
        onClick?: undefined;
    } | {
        onPlainLeftClick: (e: React.MouseEvent) => void;
        onClick?: undefined;
    } | {
        onClick: (e: React.MouseEvent) => void;
        onPlainLeftClick?: undefined;
    };
    getPageSizeSelector(): false | import("react/jsx-runtime").JSX.Element;
    getPagerLinks(): import("react/jsx-runtime").JSX.Element;
    generateHref(page: number): string | undefined;
    getPagerContent(): import("react/jsx-runtime").JSX.Element;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type PagerAttrs = React.JSX.LibraryManagedAttributes<typeof Pager, PagerProps>;
export {};
