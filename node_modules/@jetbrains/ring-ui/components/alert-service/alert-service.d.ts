import { ReactNode, Ref } from 'react';
import Alert, { AlertProps, AlertType } from '../alert/alert';
export interface AlertItem extends Partial<Omit<AlertProps, 'children'>> {
    key: string | number;
    message: ReactNode;
    ref?: Ref<Alert>;
}
/**
 * @name Alert Service
 */
declare class AlertService {
    defaultTimeout: number;
    showingAlerts: AlertItem[];
    containerElement: HTMLDivElement;
    reactRoot: import("react-dom/client").Root;
    _getShowingAlerts(): AlertItem[];
    renderAlertContainer(alerts: readonly AlertItem[]): import("react/jsx-runtime").JSX.Element;
    /**
     * Renders alert container into virtual node to skip maintaining container
     */
    renderAlerts(): void;
    findSameAlert(message: ReactNode, type: AlertType | undefined): AlertItem;
    startAlertClosing(alert: AlertItem): void;
    remove(key: string | number | null | undefined): void;
    removeWithoutAnimation(key: string | number): void;
    stopShakingWhenAnimationDone(shakingAlert: AlertItem): void;
    addAlert(message: ReactNode, type?: AlertType | undefined, timeout?: number, options?: Partial<AlertItem>): string | number;
    setDefaultTimeout(timeout: number): void;
    error(message: ReactNode, timeout?: number): string | number;
    message(message: ReactNode, timeout?: number): string | number;
    warning(message: ReactNode, timeout?: number): string | number;
    successMessage(message: ReactNode, timeout?: number): string | number;
    loadingMessage(message: ReactNode, timeout?: number): string | number;
}
declare const alertService: AlertService;
export default alertService;
