import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import chevronRightIcon from '@jetbrains/icons/chevron-right';
import chevronDownIcon from '@jetbrains/icons/chevron-down';
import Link from '../link/link';
import Text from '../text/text';
import LoaderInline from '../loader-inline/loader-inline';
import Button from '../button/button';
import Title from './title';
import styles from './data-list.css';
export var moreLessButtonStates;
(function (moreLessButtonStates) {
    moreLessButtonStates[moreLessButtonStates["UNUSED"] = 0] = "UNUSED";
    moreLessButtonStates[moreLessButtonStates["MORE"] = 1] = "MORE";
    moreLessButtonStates[moreLessButtonStates["MORE_LOADING"] = 2] = "MORE_LOADING";
    moreLessButtonStates[moreLessButtonStates["LESS"] = 3] = "LESS";
})(moreLessButtonStates || (moreLessButtonStates = {}));
const ITEM_LEFT_OFFSET = 32;
const LIST_LEFT_OFFSET = 24;
export default class Item extends PureComponent {
    static defaultProps = {
        items: [],
        level: 0,
        parentShift: 0,
        showMoreLessButton: moreLessButtonStates.UNUSED,
        onItemMoreLess: () => { },
    };
    onShowMore = () => {
        const { onItemMoreLess, item } = this.props;
        onItemMoreLess(item, true);
    };
    onShowLess = () => {
        const { onItemMoreLess, item } = this.props;
        onItemMoreLess(item, false);
    };
    onFocus = () => {
        const { onFocus, item } = this.props;
        onFocus(item);
    };
    onSelect = (selected) => {
        const { onSelect, item } = this.props;
        onSelect(item, selected);
    };
    renderItem = (model, parentShift) => {
        const { onFocus, onSelect, selection, level, itemFormatter } = this.props;
        const item = itemFormatter(model);
        return (_jsx(Item, { item: model, title: item.title, items: item.items, level: level + 1, parentShift: parentShift, itemFormatter: itemFormatter, collapsible: item.collapsible, collapsed: item.collapsed, onCollapse: item.onCollapse, onExpand: item.onExpand, showFocus: selection.isFocused(model), onFocus: onFocus, selection: selection, selectable: item.selectable, selected: selection.isSelected(model), onSelect: onSelect }, item.key || item.id));
    };
    render() {
        const { title, items, showMoreLessButton, level, parentShift, showFocus, selectable, selected, collapsible, collapsed, onCollapse, onExpand, } = this.props;
        let moreLessButton;
        if (showMoreLessButton === moreLessButtonStates.MORE || showMoreLessButton === moreLessButtonStates.MORE_LOADING) {
            moreLessButton = (_jsxs(Text, { info: true, children: [_jsx(Link, { inherit: true, pseudo: true, onClick: this.onShowMore, children: 'Show more' }), showMoreLessButton === moreLessButtonStates.MORE_LOADING && (_jsx(LoaderInline, { className: styles.showMoreLoader }))] }));
        }
        else if (showMoreLessButton === moreLessButtonStates.LESS) {
            moreLessButton = (_jsx(Text, { info: true, children: _jsx(Link, { inherit: true, pseudo: true, onClick: this.onShowLess, children: 'Show less' }) }));
        }
        let collapserExpander = null;
        if (collapsible) {
            if (collapsed) {
                collapserExpander = (_jsx(Button, { title: "Expand", onClick: onExpand, icon: chevronRightIcon, className: styles.collapseButton, iconClassName: styles.collapseIcon, "data-test": "ring-data-list-expand" }));
            }
            else {
                collapserExpander = (_jsx(Button, { title: "Collapse", onClick: onCollapse, icon: chevronDownIcon, className: styles.collapseButton, iconClassName: styles.collapseIcon, "data-test": "ring-data-list-collapse" }));
            }
        }
        const itemIsEmpty = !items?.length || (collapsible && collapsed);
        const offset = level * LIST_LEFT_OFFSET + ITEM_LEFT_OFFSET + parentShift;
        return (_jsxs("li", { children: [_jsx(Title, { title: title, focused: showFocus, showFocus: showFocus, selectable: selectable, selected: selected, collapserExpander: collapserExpander, onFocus: this.onFocus, onSelect: this.onSelect, offset: offset }), !itemIsEmpty ? (_jsxs("ul", { className: styles.itemContent, children: [items.map(model => this.renderItem(model, parentShift)), showMoreLessButton !== moreLessButtonStates.UNUSED ? (_jsx("li", { className: styles.showMore, children: moreLessButton })) : null] })) : null] }));
    }
}
