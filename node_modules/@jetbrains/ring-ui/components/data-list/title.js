import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import classNames from 'classnames';
import focusSensorHOC from '../global/focus-sensor-hoc';
import Checkbox from '../checkbox/checkbox';
import getUID from '../global/get-uid';
import styles from './data-list.css';
class Title extends PureComponent {
    static defaultProps = {
        selectable: false,
        selected: false,
        showFocus: false,
    };
    id = getUID('data-list-title');
    onCheckboxFocus = () => {
        this.props.onFocusRestore();
    };
    onCheckboxChange = () => {
        this.toggleSelection();
    };
    toggleSelection() {
        const { selectable, selected, onSelect } = this.props;
        if (selectable) {
            onSelect(!selected);
        }
    }
    render() {
        const { className, title, offset, showFocus, innerRef, selectable, selected, collapserExpander } = this.props;
        const classes = classNames(className, {
            [styles.title]: true,
            [styles.titleFocused]: showFocus,
            [styles.titleSelected]: selected,
        });
        return (_jsxs("div", { id: this.id, className: classes, style: { paddingLeft: offset }, ref: innerRef, children: [_jsxs("div", { className: styles.boxes, children: [selectable && (_jsx("div", { className: styles.checkboxBox, children: _jsx(Checkbox, { "aria-labelledby": this.id, className: showFocus ? 'ring-checkbox_focus' : '', checked: selected, onFocus: this.onCheckboxFocus, onChange: this.onCheckboxChange, tabIndex: -1 }) })), collapserExpander] }), title] }));
    }
}
export default focusSensorHOC(Title);
