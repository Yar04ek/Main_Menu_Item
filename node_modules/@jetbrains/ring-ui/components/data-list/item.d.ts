import { PureComponent, ReactNode } from 'react';
import Selection, { SelectionItem } from '../table/selection';
export declare enum moreLessButtonStates {
    UNUSED = 0,
    MORE = 1,
    MORE_LOADING = 2,
    LESS = 3
}
export interface BaseFormattedItem<T> {
    items?: readonly T[];
    title?: ReactNode;
    collapsible?: boolean | null | undefined;
    collapsed?: boolean | null | undefined;
    onCollapse?: () => void;
    onExpand?: () => void;
    selectable?: boolean | undefined;
}
export interface FormattedItem<T> extends BaseFormattedItem<T> {
    key?: string | null | undefined;
    id?: string | number | null | undefined;
}
export interface ItemProps<T extends SelectionItem> extends BaseFormattedItem<T> {
    item: T;
    onFocus: (item: T) => void;
    onSelect: (item: T, selected: boolean) => void;
    itemFormatter: (item: T) => FormattedItem<T>;
    level: number;
    parentShift: number;
    showMoreLessButton: moreLessButtonStates;
    onItemMoreLess: (item: T, more: boolean) => void;
    className?: string | null | undefined;
    showFocus?: boolean | undefined;
    selection: Selection<T>;
    selected?: boolean | undefined;
}
export default class Item<T extends SelectionItem> extends PureComponent<ItemProps<T>> {
    static defaultProps: {
        items: never[];
        level: number;
        parentShift: number;
        showMoreLessButton: moreLessButtonStates;
        onItemMoreLess: () => void;
    };
    onShowMore: () => void;
    onShowLess: () => void;
    onFocus: () => void;
    onSelect: (selected: boolean) => void;
    renderItem: (model: T, parentShift: number) => import("react/jsx-runtime").JSX.Element;
    render(): import("react/jsx-runtime").JSX.Element;
}
