import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * @name Data List
 */
import { PureComponent, Component } from 'react';
import classNames from 'classnames';
import focusSensorHOC from '../global/focus-sensor-hoc';
import selectionShortcutsHOC from '../table/selection-shortcuts-hoc';
import disableHoverHOC from '../table/disable-hover-hoc';
import getUID from '../global/get-uid';
import Shortcuts from '../shortcuts/shortcuts';
import Loader from '../loader/loader';
import Item, { moreLessButtonStates } from './item';
import styles from './data-list.css';
class DataList extends PureComponent {
    static defaultProps = {
        loading: false,
        onItemMoreLess: () => { },
        itemMoreLessState: () => moreLessButtonStates.UNUSED,
        remoteSelection: false,
    };
    componentDidUpdate(prevProps) {
        const { data, selection, onSelect, selectable } = this.props;
        if (data !== prevProps.data && !prevProps.remoteSelection) {
            onSelect(selection.cloneWith({ data }));
        }
        if (!selectable && prevProps.selectable) {
            onSelect(selection.resetSelection());
        }
    }
    shortcutsScope = getUID('ring-data-list-');
    onItemFocus = (item) => {
        const { selection, onSelect } = this.props;
        onSelect(selection.focus(item));
    };
    onItemSelect = (item, selected) => {
        const { selection, onSelect } = this.props;
        if (selected) {
            onSelect(selection.select(item));
        }
        else {
            onSelect(selection.deselect(item));
        }
    };
    onEqualPress = () => {
        const { selection, itemFormatter } = this.props;
        const focused = selection.getFocused();
        if (focused == null) {
            throw new Error('No focused item');
        }
        const item = itemFormatter(focused);
        if (item.collapsed) {
            item.onExpand?.();
        }
        else {
            item.onCollapse?.();
        }
    };
    shortcutsMap = {
        '=': this.onEqualPress,
    };
    render() {
        const { data, className, loading, selection, disabledHover, itemFormatter, focused, innerRef } = this.props;
        const shortcutsMap = { ...this.shortcutsMap, ...this.props.shortcutsMap };
        const classes = classNames(className, {
            [styles.dataList]: true,
            [styles.disabledHover]: disabledHover,
            [styles.multiSelection]: selection.getSelected().size > 0,
        });
        return (_jsxs("div", { className: styles.dataListWrapper, "data-test": "ring-data-list", ref: innerRef, children: [focused && _jsx(Shortcuts, { map: shortcutsMap, scope: this.shortcutsScope }), _jsx("ul", { className: classes, children: data.map(model => {
                        const item = itemFormatter(model);
                        const { id, key, title, items } = item;
                        const showMoreLessButton = this.props.itemMoreLessState?.(item);
                        return (_jsx(Item, { item: model, title: title, items: items, itemFormatter: itemFormatter, collapsible: item.collapsible, collapsed: item.collapsed, onCollapse: item.onCollapse, onExpand: item.onExpand, showFocus: selection.isFocused(model), onFocus: this.onItemFocus, selection: selection, selectable: item.selectable, selected: selection.isSelected(model), onSelect: this.onItemSelect, showMoreLessButton: showMoreLessButton, onItemMoreLess: this.props.onItemMoreLess }, key || id));
                    }) }), loading && (_jsx("div", { className: data.length > 0 ? styles.loadingOverlay : undefined, children: _jsx(Loader, {}) }))] }));
    }
}
const getContainer = () => disableHoverHOC(selectionShortcutsHOC(focusSensorHOC(DataList)));
// eslint-disable-next-line react/no-multi-comp
export default class DataListContainer extends Component {
    // https://stackoverflow.com/a/53882322/6304152
    DataList = getContainer();
    render() {
        return _jsx(this.DataList, { ...this.props });
    }
}
