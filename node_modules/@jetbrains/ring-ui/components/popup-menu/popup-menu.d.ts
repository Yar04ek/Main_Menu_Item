import { SyntheticEvent } from 'react';
import Popup, { BasePopupProps } from '../popup/popup';
import List, { ListProps as ListPropsType } from '../list/list';
import { ListDataItem } from '../list/consts';
export interface PopupMenuProps<T = unknown> extends Omit<ListPropsType<T>, 'maxHeight' | 'hidden'>, Omit<BasePopupProps, 'onMouseOut'> {
    closeOnSelect: boolean;
}
/**
 * @name Popup Menu
 */
export default class PopupMenu<T = unknown> extends Popup<PopupMenuProps<T>> {
    static isItemType: <T_1>(listItemType: import("../list/consts").Type, item: ListDataItem<T_1>) => boolean;
    static ListProps: {
        Type: typeof import("../list/consts").Type;
        Dimension: {
            ITEM_PADDING: number;
            ITEM_HEIGHT: number;
            COMPACT_ITEM_HEIGHT: number;
            SEPARATOR_HEIGHT: number;
            SEPARATOR_FIRST_HEIGHT: number;
            SEPARATOR_TEXT_HEIGHT: number;
            TITLE_HEIGHT: number;
            INNER_PADDING: number;
            MARGIN: number;
        };
    };
    static defaultProps: {
        renderOptimization: boolean;
        closeOnSelect: boolean;
        largeBorderRadius: boolean;
        shortcuts: boolean;
        hidden: boolean;
        onOutsideClick(): void;
        onEscPress(): void;
        onCloseAttempt(): void;
        dontCloseOnAnchorClick: boolean;
        keepMounted: boolean;
        directions: import("../popup/popup.consts").Directions[];
        autoPositioning: boolean;
        autoPositioningOnScroll: boolean;
        autoCorrectTopOverflow: boolean;
        left: number;
        top: number;
        offset: number;
        sidePadding: number;
        attached: boolean;
        trapFocus: boolean;
        autoFocusFirst: boolean;
        legacy: boolean;
        data: never[];
        restoreActiveIndex: boolean;
        activateSingleItem: boolean;
        activateFirstItem: boolean;
        onMouseOut: () => void;
        onSelect: () => void;
        onScrollToBottom: () => void;
        onResize: () => void;
        disableMoveDownOverflow: boolean;
        ariaLabel: string;
    };
    onSelect: (item: ListDataItem<T>, event: Event | SyntheticEvent) => void;
    list?: List<T> | null;
    listRef: (el: List<T> | null) => void;
    /** @override */
    getInternalContent(): import("react/jsx-runtime").JSX.Element;
}
export type PopupMenuAttrs<T = unknown> = React.JSX.LibraryManagedAttributes<typeof PopupMenu, PopupMenuProps<T>>;
export declare const ListProps: {
    Type: typeof import("../list/consts").Type;
    Dimension: {
        ITEM_PADDING: number;
        ITEM_HEIGHT: number;
        COMPACT_ITEM_HEIGHT: number;
        SEPARATOR_HEIGHT: number;
        SEPARATOR_FIRST_HEIGHT: number;
        SEPARATOR_TEXT_HEIGHT: number;
        TITLE_HEIGHT: number;
        INNER_PADDING: number;
        MARGIN: number;
    };
};
