import { ReactNode } from 'react';
import type { Locale } from 'date-fns';
declare const units: {
    unit: number;
    cellSize: number;
    calHeight: number;
    yearHeight: number;
};
export default units;
export declare const YEAR = 12;
export declare const WEEK = 7;
export declare const FIFTH_DAY = 4;
export declare const weekdays: {
    MO: number;
    TU: number;
    WE: number;
    TH: number;
    FR: number;
    SA: number;
    SU: number;
};
export declare const MIDDLE_DAY = 15;
export declare const yearDuration: number;
export declare const yearScrollSpeed: number;
export declare const DOUBLE = 2;
export declare const HALF = 0.5;
export declare function parseTime(time: string): string | null;
export declare function shiftWeekArray<T>(arr: T[], startOfWeek: number): T[];
export declare function getWeekStartsOn(locale: Locale | undefined): number;
export declare function getDayNumInWeek(locale: Locale | undefined, day: number): number;
export interface DateInputTranslations {
    addFirstDate?: string;
    addSecondDate?: string;
    addTime?: string;
    selectName?: string;
}
export interface DateSpecificPopupProps {
    withTime?: false | undefined;
    range?: false | undefined;
    onChange: (date: Date | null | undefined) => void;
}
export interface DatePickerChange {
    from?: Date | null | undefined;
    to?: Date | null | undefined;
    date?: Date | null | undefined;
    time?: string | null | undefined;
}
export interface TimeSpecificPopupProps {
    withTime: true;
    range?: false | undefined;
    onChange: (change: DatePickerChange) => void;
}
export interface RangeSpecificPopupProps {
    withTime?: false | undefined;
    range: true;
    onChange: (change: DatePickerChange) => void;
}
export interface DatePopupState {
    active: Field;
    text: string | null;
    hoverDate: Date | null;
    scrollDate: number | null;
}
export interface DatePopupBaseProps {
    date?: Date | number | string | null | undefined;
    time?: string | null | undefined;
    from?: Date | number | string | null | undefined;
    to?: Date | number | string | null | undefined;
    minDate?: string | null | undefined;
    maxDate?: string | null | undefined;
    translations?: DateInputTranslations | null | undefined;
    fromPlaceholder?: string | null | undefined;
    toPlaceholder?: string | null | undefined;
    timePlaceholder?: string | null | undefined;
    locale?: Locale | undefined;
    parseDateInput: (text: Date | number | string | null | undefined) => Date | null;
    displayFormat: (date: Date, locale: Locale | undefined) => string;
    onComplete: () => void;
    onClear?: ((e: React.MouseEvent<HTMLButtonElement>) => void) | null | undefined;
    renderAfterCalendar?: ((state: DatePopupState) => ReactNode) | undefined;
}
export interface Dates {
    from?: Date | null | undefined;
    to?: Date | null | undefined;
    date?: Date | null | undefined;
    time?: never;
}
export interface CalendarProps extends Omit<DatePopupBaseProps, 'date' | 'from' | 'to' | 'time'>, Dates {
    activeDate: Date | null;
    scrollDate: number | Date;
    currentRange: [Date, Date] | null;
    activeRange: [Date, Date] | null;
    onScroll: (to: number) => void;
    onScrollChange: (date: number) => void;
}
export interface MonthsProps extends CalendarProps {
    onSelect: (date: Date) => void;
    onHover: (date: Date) => void;
}
export type Field = 'date' | 'time' | 'from' | 'to';
