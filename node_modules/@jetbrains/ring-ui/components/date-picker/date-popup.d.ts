import { Component } from 'react';
import * as React from 'react';
import { DatePickerChange, DatePopupBaseProps, DateSpecificPopupProps, DatePopupState, RangeSpecificPopupProps, TimeSpecificPopupProps, Field } from './consts';
export type DatePopupProps = DatePopupBaseProps & (DateSpecificPopupProps | TimeSpecificPopupProps | RangeSpecificPopupProps);
export default class DatePopup extends Component<DatePopupProps, DatePopupState> {
    static sameDay(next: Date | number | null, prev: Date | number | null): boolean;
    static defaultProps: {
        onChange(): void;
    };
    constructor(props: DatePopupProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: DatePopupBaseProps, prevState: DatePopupState): void;
    componentWillUnmount(): void;
    private _scrollDate?;
    private _scrollTS?;
    isInTimeMode: () => boolean;
    componentRef: React.RefObject<HTMLDivElement>;
    handleWheel: (e: WheelEvent) => void;
    parse(text: string | null | undefined, type: 'time'): string;
    parse(text: Date | number | string | null | undefined, type?: 'date' | 'from' | 'to'): Date;
    select(changes: DatePickerChange): void;
    confirm(name: Field): void;
    isValidDate: (parsedText: Date) => boolean;
    scheduleScroll: () => void;
    scrollTo: (scrollDate: number) => void;
    hoverHandler: (hoverDate: Date) => void;
    handleActivate: (arg: Field) => () => void;
    handleInput: (text: string, name: Field) => void;
    handleConfirm: (arg: Field) => () => void;
    selectHandler: (date: Date) => void;
    handleScroll: (scrollDate: number) => void;
    onClear: (e: React.MouseEvent<HTMLButtonElement>) => void;
    render(): import("react/jsx-runtime").JSX.Element;
}
