import { jsx as _jsx } from "react/jsx-runtime";
import { Component } from 'react';
import classNames from 'classnames';
import { addDays } from 'date-fns/addDays';
import { format } from 'date-fns/format';
import { getDay } from 'date-fns/getDay';
import { getDate } from 'date-fns/getDate';
import { isAfter } from 'date-fns/isAfter';
import { isBefore } from 'date-fns/isBefore';
import { isSameDay } from 'date-fns/isSameDay';
import { isToday } from 'date-fns/isToday';
import { startOfDay } from 'date-fns/startOfDay';
import { weekdays, getDayNumInWeek } from './consts';
import styles from './date-picker.css';
let hoverTO;
export default class Day extends Component {
    handleClick = () => this.props.onSelect(this.props.day);
    handleMouseOver = () => {
        if (hoverTO) {
            window.clearTimeout(hoverTO);
            hoverTO = null;
        }
        this.props.onHover(this.props.day);
    };
    handleMouseOut = () => {
        hoverTO = window.setTimeout(this.props.onHover, 0);
    };
    isDay = (date) => isSameDay(this.props.day, date);
    is = (name) => {
        const value = this.props[name];
        return value != null && this.isDay(value);
    };
    inRange = (range) => range &&
        isAfter(startOfDay(this.props.day), startOfDay(range[0])) &&
        isBefore(startOfDay(this.props.day), startOfDay(range[1]));
    isDisabled = (date) => {
        const min = this.parse(this.props.minDate);
        const max = this.parse(this.props.maxDate);
        return ((min != null && isBefore(startOfDay(date), startOfDay(min))) ||
            (max != null && isAfter(startOfDay(date), startOfDay(max))));
    };
    parse(text) {
        return this.props.parseDateInput(text);
    }
    render() {
        const { day, from, currentRange, activeRange, empty, locale } = this.props;
        const reverse = activeRange && activeRange[1] === from;
        const dayInWeek = getDayNumInWeek(locale, getDay(day)) + 1;
        function makeSpreadRange(range) {
            return range && [range[0], addDays(range[1], 1)];
        }
        const spreadRange = makeSpreadRange(currentRange);
        const disabled = this.isDisabled(day);
        const activeSpreadRange = makeSpreadRange(activeRange);
        return (
        // TODO make keyboard navigation actually work
        _jsx("button", { type: "button", className: classNames(styles.day, styles[`Day${dayInWeek}`], {
                [styles.current]: ['date', 'from', 'to'].some(this.is),
                [styles.active]: !disabled && this.is('activeDate'),
                [styles.weekend]: [weekdays.SA, weekdays.SU].includes(getDay(day)),
                [styles.empty]: empty,
                [styles.from]: (currentRange && this.isDay(currentRange[0]) && !reverse) || (activeRange && this.isDay(activeRange[0])),
                [styles.to]: (currentRange && this.isDay(currentRange[1])) || (activeRange && this.isDay(activeRange[1])),
                [styles.between]: this.inRange(currentRange),
                [styles.activeBetween]: !disabled && this.inRange(activeRange),
                [styles.first]: getDate(day) === 1,
                [styles.spread]: this.inRange(spreadRange),
                [styles.activeSpread]: !disabled && this.inRange(activeSpreadRange),
                [styles.disabled]: disabled,
            }), onClick: this.handleClick, onMouseOver: this.handleMouseOver, onFocus: this.handleMouseOver, onMouseOut: this.handleMouseOut, onBlur: this.handleMouseOut, disabled: disabled, children: empty || _jsx("span", { className: classNames({ [styles.today]: isToday(day) }), children: format(day, 'd') }) }));
    }
}
