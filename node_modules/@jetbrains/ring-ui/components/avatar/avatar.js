import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import classNames from 'classnames';
import deprecate from 'util-deprecate';
import { encodeURL, isDataURI, parseQueryString } from '../global/url';
import { getPixelRatio } from '../global/dom';
import memoize from '../global/memoize';
import styles from './avatar.css';
import FallbackAvatar from './fallback-avatar';
import { Size } from './avatar-size';
import AvatarInfo from './avatar-info';
export { Size };
const warnSize = memoize((size) => deprecate(() => { }, `Avatar: Size${size} is deprecated and will be removed in 8.0. The supported sizes are: Size20, Size24, Size28, Size32, Size40.`));
export default class Avatar extends PureComponent {
    static defaultProps = {
        dpr: getPixelRatio(),
        size: Size.Size20,
        subavatarSize: Size.Size20 / 2,
        style: {},
    };
    state = {
        errorUrl: '',
    };
    handleError = () => {
        this.setState({ errorUrl: this.props.url });
    };
    handleSuccess = () => {
        this.setState({ errorUrl: '' });
    };
    render() {
        const { size, url, dpr, style, round, subavatar, subavatarSize, username, info, skipParams, ...restProps } = this.props;
        if ([Size.Size18, Size.Size48].includes(size)) {
            warnSize(size)();
        }
        const sizeString = `${size}px`;
        const subavatarSizeString = `${subavatarSize}px`;
        const styleObj = {
            height: sizeString,
            width: sizeString,
            ...style,
        };
        const styleObjGroup = {
            borderRadius: '2px',
            height: subavatarSizeString,
            width: subavatarSizeString,
            ...style,
        };
        const classes = classNames(styles.avatar, this.props.className, {
            [styles.round]: round,
        });
        if (!url || this.state.errorUrl === url) {
            return (_jsxs("span", { ...restProps, "data-test": "avatar", className: classNames(classes, {
                    [styles.empty]: username == null && info == null,
                }), style: styleObj, children: [username != null && _jsx(FallbackAvatar, { size: size, round: round, username: username }), info != null && _jsx(AvatarInfo, { size: size, children: info })] }));
        }
        let src = url;
        if (!skipParams && !isDataURI(url)) {
            const [urlStart, query] = url.split('?');
            const queryParams = {
                ...parseQueryString(query),
                dpr,
                size,
            };
            src = encodeURL(urlStart, queryParams);
        }
        let subavatarSrc = null;
        if (subavatar && !isDataURI(subavatar)) {
            const [urlStart, query] = subavatar.split('?');
            const queryParams = {
                ...parseQueryString(query),
                dpr,
                subavatarSizeString,
            };
            subavatarSrc = skipParams ? subavatar : encodeURL(urlStart, queryParams);
            return (_jsxs("div", { children: [_jsx("img", { ...restProps, onError: this.handleError, onLoad: this.handleSuccess, className: classNames(classes, styles.avatarShadow), style: styleObj, src: src, alt: "User avatar" }), _jsx("img", { ...restProps, "data-test": "avatar", onError: this.handleError, onLoad: this.handleSuccess, className: classNames(styles.subavatar), style: styleObjGroup, src: subavatarSrc, alt: "Subavatar" })] }));
        }
        else {
            return (_jsx("img", { ...restProps, "data-test": "avatar", onError: this.handleError, onLoad: this.handleSuccess, className: classNames(classes, styles.avatarShadow), style: styleObj, src: src, alt: "User avatar" }));
        }
    }
}
