export interface Color {
    r: number;
    g: number;
    b: number;
}
interface ParticleType {
    step(): void;
    isAlive(): boolean;
    draw(ctx: CanvasRenderingContext2D): void;
}
export interface LoaderCoreProps {
    size: number;
    stop: boolean;
    deterministic: boolean;
    colors: Color[];
    message?: string | null | undefined;
}
export default class LoaderCore {
    static defaultProps: {
        size: number;
        stop: boolean;
        deterministic: boolean;
        colors: {
            r: number;
            g: number;
            b: number;
        }[];
    };
    static calculateGradient(startColor: Color, stopColor: Color, position: number): {
        r: number;
        g: number;
        b: number;
    };
    props: LoaderCoreProps;
    canvas: HTMLCanvasElement;
    textNode: HTMLElement;
    ctx: CanvasRenderingContext2D | null;
    height: number;
    width: number;
    particles: ParticleType[];
    baseSpeed: number;
    colorIndex: number;
    maxRadius: number;
    minRadius: number;
    colorChangeTick: number;
    x: number;
    y: number;
    radius: number;
    hSpeed: number;
    vSpeed: number;
    radiusSpeed: number;
    tick: number;
    isRunning: boolean;
    constructor(containerNode: Node, props: Partial<LoaderCoreProps>);
    static getPixelRatio(): number;
    prepareInitialState(ticks: number): void;
    handleLimits(coord: number, radius: number, speed: number, limit: number): number;
    calculateNextCoordinates(): void;
    calculateNextRadius(): void;
    getNextColor(): {
        r: number;
        g: number;
        b: number;
    };
    nextTick(): void;
    step(): void;
    removeDeadParticles(): void;
    draw(): void;
    loop(): void;
    updateMessage(text: string): void;
    stopAnimation(): void;
    startAnimation(): void;
    destroy(): void;
}
export {};
