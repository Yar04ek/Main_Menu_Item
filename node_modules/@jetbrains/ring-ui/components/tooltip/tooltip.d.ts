import * as React from 'react';
import { AllHTMLAttributes, Component, ReactNode } from 'react';
import Popup, { PopupAttrs } from '../popup/popup';
import { Listeners } from '../global/dom';
import Theme from '../global/theme';
interface Context {
    onNestedTooltipShow: () => void;
    onNestedTooltipHide: () => void;
}
declare const TooltipContext: React.Context<Context | undefined>;
export interface TooltipProps extends Omit<AllHTMLAttributes<HTMLSpanElement>, 'title'> {
    delay?: number | null | undefined;
    selfOverflowOnly?: boolean | null | undefined;
    popupProps?: Partial<PopupAttrs> | null | undefined;
    title?: ReactNode | null | undefined;
    theme?: Theme | 'inherit';
    'data-test'?: string | null | undefined;
    long?: boolean | null | undefined;
}
/**
 * @name Tooltip
 */
export default class Tooltip extends Component<TooltipProps> {
    static defaultProps: {
        title: string;
        selfOverflowOnly: boolean;
        theme: Theme;
        popupProps: {};
    };
    state: {
        showPopup: boolean;
        showNestedPopup: boolean;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: TooltipProps): void;
    componentWillUnmount(): void;
    static PopupProps: {
        Directions: typeof import("../popup/popup.consts").Directions;
        Dimension: typeof import("../popup/popup.consts").Dimension;
        MinWidth: typeof import("../popup/popup.consts").MinWidth;
        MaxHeight: typeof import("../popup/popup.consts").MaxHeight;
    };
    static contextType: React.Context<Context | undefined>;
    context: React.ContextType<typeof TooltipContext>;
    timeout?: number;
    listeners: Listeners;
    containerNode?: HTMLElement | null;
    containerRef: (el: HTMLElement | null) => void;
    tryToShowPopup: () => void;
    showPopup: () => void;
    hidePopup: () => void;
    addListeners(): void;
    hideIfMovedOutsidePopup: (ev: React.SyntheticEvent<HTMLElement>) => void;
    popup?: Popup | null;
    popupRef: (el: Popup | null) => void;
    onNestedTooltipShow: () => void;
    onNestedTooltipHide: () => void;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type TooltipAttrs = React.JSX.LibraryManagedAttributes<typeof Tooltip, TooltipProps>;
export {};
