import { PureComponent, ReactElement } from 'react';
import * as React from 'react';
import { CollapsibleTabsProps } from './collapsible-tabs';
import { CustomItem } from './custom-item';
import { TabProps } from './tab';
export { CustomItem };
export type Children = readonly (Children | null | boolean)[] | ReactElement<TabProps> | null | boolean;
export interface TabsProps extends Omit<CollapsibleTabsProps, 'onSelect' | 'children'> {
    children: Children;
    onSelect?: ((key: string) => void) | null | undefined;
    onLastVisibleIndexChange?: ((index: number) => void) | null | undefined;
    className?: string | null | undefined;
    tabContainerClassName?: string | null | undefined;
    autoCollapse?: boolean | null | undefined;
    'data-test'?: string | null | undefined;
}
declare class Tabs extends PureComponent<TabsProps> {
    handleSelect: (arg: string) => () => void | undefined;
    getTabTitle: (child: ReactElement<TabProps>, i: number) => import("react/jsx-runtime").JSX.Element;
    render(): import("react/jsx-runtime").JSX.Element;
}
export type TabsAttrs = React.JSX.LibraryManagedAttributes<typeof Tabs, TabsProps>;
export default Tabs;
