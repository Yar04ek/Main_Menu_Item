import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import * as React from 'react';
import classNames from 'classnames';
import memoize from '../global/memoize';
import dataTests from '../global/data-tests';
import styles from './tabs.css';
import TabLink from './tab-link';
import CollapsibleTabs from './collapsible-tabs';
import { CustomItem } from './custom-item';
export { CustomItem };
class Tabs extends PureComponent {
    handleSelect = memoize((key) => () => this.props.onSelect?.(key));
    getTabTitle = (child, i) => {
        if (child == null || typeof child !== 'object' || child.type === CustomItem) {
            return child;
        }
        const { selected, onSelect } = this.props;
        const { title, titleProps, id, disabled, href, className, activeClassName } = child.props;
        const key = id || String(i);
        const isSelected = key === selected;
        const titleClasses = classNames(styles.title, className, isSelected && activeClassName, {
            [styles.selected]: isSelected,
        });
        return (_jsx(TabLink, { title: title, isSelected: isSelected, href: href, className: titleClasses, disabled: disabled, onPlainLeftClick: onSelect != null ? this.handleSelect(key) : undefined, ...titleProps }, key));
    };
    render() {
        const { className, tabContainerClassName, children, selected, autoCollapse, 'data-test': dataTest, onSelect, ...restProps } = this.props;
        const classes = classNames(styles.tabs, className);
        const childrenArray = React.Children.toArray(children).filter(Boolean);
        return (_jsxs("div", { className: classes, "data-test": dataTests('ring-dumb-tabs', dataTest), children: [autoCollapse === true ? (_jsx(CollapsibleTabs, { ...restProps, onSelect: onSelect != null ? this.handleSelect : undefined, selected: selected, children: childrenArray })) : (_jsx("div", { className: styles.titles, children: childrenArray.map(this.getTabTitle) })), _jsx("div", { className: classNames(tabContainerClassName), children: childrenArray.find(({ props }, i) => (props.id || String(i)) === selected) })] }));
    }
}
export default Tabs;
