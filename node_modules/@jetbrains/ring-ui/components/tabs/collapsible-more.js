import { jsx as _jsx } from "react/jsx-runtime";
import { memo, useMemo } from 'react';
import classNames from 'classnames';
import { Directions } from '../popup/popup.consts';
import PopupMenu, { ListProps } from '../popup-menu/popup-menu';
import Dropdown from '../dropdown/dropdown';
import Anchor from '../dropdown/anchor';
import styles from './tabs.css';
import getTabTitles from './collapsible-tab';
import { CustomItem } from './custom-item';
export const AnchorLink = ({ hasActiveChildren, moreClassName, moreActiveClassName, ...restProps }) => {
    const classnames = classNames(styles.title, hasActiveChildren && styles.selected, hasActiveChildren && moreActiveClassName, moreClassName);
    return (_jsx(Anchor, { title: 'More', className: classnames, ...restProps, children: 'More' }));
};
const morePopupDirections = [Directions.BOTTOM_CENTER, Directions.BOTTOM_LEFT, Directions.BOTTOM_RIGHT];
export const MoreButton = memo(({ items, selected, onSelect, moreClassName, moreActiveClassName, morePopupClassName, morePopupItemClassName, morePopupBeforeEnd, }) => {
    const onSelectHandler = useMemo(() => onSelect != null
        ? (listItem) => {
            if (listItem.disabled === true || listItem.custom === true) {
                return;
            }
            const cb = onSelect(String(listItem.key));
            cb();
        }
        : undefined, [onSelect]);
    const hasActiveChild = useMemo(() => items.some(item => item.props.alwaysHidden && item.props.id === selected), [items, selected]);
    const data = useMemo(() => {
        const popupItems = getTabTitles({
            items,
            selected,
            collapsed: true,
        }).map(tab => {
            const disabled = tab.props.disabled === true;
            const custom = tab.props.child.type === CustomItem;
            return {
                template: tab,
                key: tab.key,
                rgItemType: ListProps.Type.CUSTOM,
                className: morePopupItemClassName,
                disabled,
                custom,
            };
        });
        if (morePopupBeforeEnd) {
            popupItems.push({
                template: morePopupBeforeEnd,
                key: 'before-end-content',
                className: styles.morePopupBeforeEnd,
                rgItemType: ListProps.Type.CUSTOM,
            });
        }
        return popupItems;
    }, [items, morePopupBeforeEnd, morePopupItemClassName, selected]);
    const popupAnchor = useMemo(() => (_jsx(AnchorLink, { moreClassName: moreClassName, moreActiveClassName: moreActiveClassName, hasActiveChildren: hasActiveChild })), [hasActiveChild, moreActiveClassName, moreClassName]);
    const popup = useMemo(() => (_jsx(PopupMenu, { directions: morePopupDirections, className: morePopupClassName, onSelect: onSelectHandler, data: data })), [data, morePopupClassName, onSelectHandler]);
    if (items.length === 0) {
        return null;
    }
    return (_jsx("div", { className: classNames(styles.title, moreClassName, hasActiveChild && moreActiveClassName), children: _jsx(Dropdown, { hoverMode: true, anchor: popupAnchor, children: popup }) }));
});
MoreButton.displayName = 'MoreButton';
export const FakeMoreButton = memo(({ moreClassName, moreActiveClassName, hasActiveChildren }) => (_jsx("div", { className: classNames(styles.moreButton, styles.title), children: _jsx(AnchorLink, { moreClassName: moreClassName, moreActiveClassName: moreActiveClassName, hasActiveChildren: hasActiveChildren, tabIndex: -1, disabled: true }) })));
FakeMoreButton.displayName = 'FakeMoreButton';
