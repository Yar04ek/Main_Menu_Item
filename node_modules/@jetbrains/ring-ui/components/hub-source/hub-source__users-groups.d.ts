import Auth, { AuthUser } from '../auth/auth';
import HubSource, { Item } from './hub-source';
export interface HubSourceUsersGroupsOptions {
    searchMax: number;
    searchSideThreshold: number;
}
export interface UserGroup extends Item {
    id: string;
    total?: number;
    userCount: number;
    iconUrl?: string;
}
export default class HubSourceUsersGroups {
    auth: Auth;
    options: HubSourceUsersGroupsOptions;
    usersSource: HubSource<AuthUser, 'users'>;
    groupsSource: HubSource<UserGroup, 'usergroups'>;
    constructor(auth: Auth, options?: Partial<HubSourceUsersGroupsOptions>);
    static wrapMultiwordQuery(query?: string): string | undefined;
    createUsersFilterFn(query?: string): (it: AuthUser) => boolean;
    getUsers(query?: string): Promise<AuthUser[]>;
    getGroups(query?: string): Promise<UserGroup[]>;
    getUserAndGroups(query?: string): Promise<[AuthUser[], UserGroup[]]>;
}
