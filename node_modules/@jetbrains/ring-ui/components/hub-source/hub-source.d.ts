import Auth from '../auth/auth';
import HTTP from '../http/http';
export interface Item {
    name: string;
}
export type Response<I extends Item, U extends string> = Partial<Record<U, I[]>> & {
    total: number;
};
export interface HubSourceOptions {
    searchMax: number;
    searchSideThreshold: number;
    queryFormatter: (query: string) => string;
}
/**
 * HubSource is designed to speed up search requests for small installations.
 * If there are less than "searchSideThreshold" items, it uses client-side filtering
 * of cached results to greatly increase search speed. Useful for completion and
 * select data source.
 */
export default class HubSource<I extends Item, U extends string> {
    static TOP_ALL: number;
    http: HTTP;
    relativeUrl: U;
    options: HubSourceOptions;
    storedData: Response<I, U> | null;
    isClientSideSearch: boolean | null;
    filterFn: (item: I) => boolean;
    constructor(auth: Auth, relativeUrl: U, options?: Partial<HubSourceOptions>);
    makeRequest<T = unknown>(queryParams?: Record<string, unknown>): Promise<T>;
    makeCachedRequest(params?: Record<string, unknown>): Promise<Response<I, U>>;
    static mergeParams(params?: Record<string, unknown>, toMerge?: Record<string, unknown>): Record<string, unknown>;
    checkIsClientSideSearch(res: Response<I, U>): boolean;
    getDefaultFilterFn(query?: string): (it: I) => boolean;
    formatQuery(query?: string): string;
    static validateInputParams(params: Record<string, unknown>): void;
    processResults(res: Response<I, U>): I[];
    sideDetectionRequest(params?: Record<string, unknown>, query?: string): Promise<unknown>;
    doClientSideSearch(params?: Record<string, unknown>): Promise<Response<I, U>>;
    doServerSideSearch(params?: Record<string, unknown>, query?: string): Promise<unknown>;
    getValueFromSuitableSource(query?: string, params?: Record<string, unknown>): Promise<Partial<Record<U, I[]>> & {
        total: number;
    }>;
    get(query: string, params: Record<string, unknown>, filterFn?: (item: I) => boolean): Promise<I[]>;
}
