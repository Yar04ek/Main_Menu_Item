import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Component } from 'react';
import classNames from 'classnames';
import { Waypoint } from 'react-waypoint';
import styles from './content-layout.css';
const ABOVE = 'above';
const INSIDE = 'inside';
export default class Sidebar extends Component {
    state = {
        topIsOutside: true,
        bottomIsOutside: true,
        sidebarVisibleHeight: undefined,
    };
    sidebarNode;
    handleTopWaypoint = ({ currentPosition }) => {
        this.setState({ topIsOutside: currentPosition === ABOVE });
    };
    handleBottomWaypoint = ({ currentPosition, waypointTop }) => {
        this.setState({
            sidebarVisibleHeight: waypointTop,
            bottomIsOutside: currentPosition !== INSIDE,
        });
    };
    shouldUseFixation() {
        const { contentNode } = this.props;
        const { sidebarNode } = this;
        if (!contentNode || !sidebarNode) {
            return false;
        }
        return contentNode.offsetHeight >= sidebarNode.offsetHeight;
    }
    shouldFixateBottom() {
        const { topIsOutside, bottomIsOutside } = this.state;
        return !bottomIsOutside && topIsOutside && this.shouldUseFixation();
    }
    sidebarRef = (node) => {
        this.sidebarNode = node;
    };
    render() {
        const { right, children, className, containerClassName, fixedClassName, contentNode, ...restProps } = this.props;
        const { topIsOutside, bottomIsOutside, sidebarVisibleHeight } = this.state;
        const shouldFixateTop = bottomIsOutside && topIsOutside && this.shouldUseFixation();
        const shouldFixateBottom = this.shouldFixateBottom();
        const containerClasses = classNames(styles.sidebarContainer, containerClassName, {
            [styles.sidebarContainerRight]: right,
        });
        const classes = classNames(styles.sidebar, className, {
            [styles.sidebarRight]: right,
            [styles.sidebarFixedTop]: shouldFixateTop,
            [styles.sidebarFixedBottom]: shouldFixateBottom,
            [fixedClassName ?? '']: shouldFixateTop || shouldFixateBottom,
        });
        const style = {
            maxHeight: shouldFixateBottom && sidebarVisibleHeight ? `${sidebarVisibleHeight}px` : undefined,
        };
        return (_jsxs("aside", { className: containerClasses, ref: this.sidebarRef, children: [_jsx(Waypoint, { onEnter: this.handleTopWaypoint, onLeave: this.handleTopWaypoint }), _jsx("div", { ...restProps, style: style, className: classes, children: children }), _jsx("div", { className: styles.bottomMarker, children: _jsx(Waypoint, { onEnter: this.handleBottomWaypoint, onLeave: this.handleBottomWaypoint }) })] }));
    }
}
