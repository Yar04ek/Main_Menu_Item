const DEFAULT_FLUSH_INTERVAL = 10000;
const DEFAULT_FLUSH_MAX_PACK_SIZE = 100;
export default class AnalyticsCustomPlugin {
    _data;
    _flush;
    _isDevelopment;
    _flushInterval;
    _flushMaxPackSize;
    _hasSendSchedule;
    constructor(send, isDevelopment, flushInterval) {
        this._data = [];
        this.config({
            send,
            isDevelopment,
            flushInterval,
        });
    }
    config(config) {
        this._flush = () => {
            if (this._data.length > 0) {
                config.send(this._data);
                this._data = [];
            }
        };
        this._isDevelopment = config.isDevelopment;
        this._flushInterval = config.flushInterval || DEFAULT_FLUSH_INTERVAL;
        this._flushMaxPackSize = config.flushMaxPackSize || DEFAULT_FLUSH_MAX_PACK_SIZE;
    }
    trackEvent(category, action, additionalData) {
        this._processEvent(category, action, additionalData);
    }
    trackPageView(path, data) {
        this._processEvent('page', 'view', data);
    }
    _initSendSchedule() {
        window.addEventListener('beforeunload', () => this._flush?.());
        if (this._flush != null) {
            setInterval(this._flush, this._flushInterval);
        }
        this._hasSendSchedule = true;
    }
    _processEvent(category, action, data) {
        if (!this._hasSendSchedule && this._flush) {
            this._initSendSchedule();
        }
        if (this._isDevelopment) {
            console.log('TRACKING DATA = ', category, action, data); // eslint-disable-line no-console
        }
        const baseSendingData = { category, action, timestamp: Date.now() };
        this._addDataToFlushingPack(data ? { ...baseSendingData, data } : baseSendingData);
    }
    _addDataToFlushingPack(sendingData) {
        this._data.push(sendingData);
        if (this._flushMaxPackSize != null && this._data.length >= this._flushMaxPackSize) {
            this._flush?.();
        }
    }
}
