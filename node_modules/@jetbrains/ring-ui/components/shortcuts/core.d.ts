export interface ShortcutsScopeOptions {
    modal?: boolean | null | undefined;
}
export interface ShortcutsScope {
    scopeId: string;
    options: ShortcutsScopeOptions;
}
type ShortcutsHandler = (e: KeyboardEvent, key: string, scopeId: string) => boolean | null | void;
export interface ShortcutsOptions {
    scope?: string | null | undefined;
    type?: string | undefined;
}
export interface ShortcutsParams extends ShortcutsOptions {
    key: string | string[];
    handler: ShortcutsHandler;
}
export type ShortcutsMap = Record<string, ShortcutsHandler>;
declare class Shortcuts {
    ALLOW_SHORTCUTS_SELECTOR: string;
    ROOT_SCOPE: {
        scopeId: string;
        options: {};
    };
    _scopes: Record<string, Record<string, ShortcutsHandler> | null>;
    private _scopeChain;
    combokeys: Combokeys.Combokeys;
    trigger: (combo: string) => void;
    constructor();
    private _dispatcher;
    /**
     * Binds a handler to a shortcut
     *
     * @param params.key {string | Array.<string>) Keys to bind
     * @param params.handler {Function} Events handle
     * @param params.scope {string} Scope (optional)
     * @param params.type {string} Event type, will be passed to Combokeys (optional)
     */
    bind(params: ShortcutsParams): void;
    /**
     * Binds a map of shortcuts to handlers with common options
     *
     * @map {Object) Keys to handlers map
     * @options.scope {string} Scope (optional)
     * @options.type {string} Event type, will be passed to Combokeys (optional)
     */
    bindMap(map: ShortcutsMap, options?: ShortcutsOptions): void;
    unbindScope(scope: string): void;
    getScope(): ShortcutsScope[];
    hasScope(scopeId: string): boolean;
    /**
     * Adds a scope to the chain
     * @param scopeId id of scope to add
     * @param options options for pushing scope
     * @param options.modal whether keys should fall through this scope or not.
     * Useful for modals or overlays
     */
    pushScope(scopeId: string, options?: ShortcutsScopeOptions): void;
    popScope(scopeId: string): ShortcutsScope[] | undefined;
    spliceScope(scopeId: string): void;
    setScope(scope?: ShortcutsScope | string | (ShortcutsScope | string)[] | null | undefined): void;
    wrapScope(scopeId: string, options?: ShortcutsScopeOptions): {
        scopeId: string;
        options: ShortcutsScopeOptions;
    };
    hasKey(key: string, scope: string): boolean;
    private _defaultFilter;
    private _getKeyboardEventType;
    setFilter(fn?: (e: Event, element: Element, key?: string) => boolean): void;
    indexOfScope(scopeId: string): number;
    reset(): void;
}
declare const _default: Shortcuts;
export default _default;
