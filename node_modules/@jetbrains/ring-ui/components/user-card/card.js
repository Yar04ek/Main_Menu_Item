import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PureComponent } from 'react';
import classNames from 'classnames';
import copyIcon from '@jetbrains/icons/copy';
import Avatar, { Size as AvatarSize } from '../avatar/avatar';
import Link from '../link/link';
import clipboard from '../clipboard/clipboard';
import Tag from '../tag/tag';
import Icon, { Size as IconSize } from '../icon/icon';
import { I18nContext } from '../i18n/i18n-context';
import Tooltip from '../tooltip/tooltip';
import styles from './user-card.css';
export default class UserCard extends PureComponent {
    static contextType = I18nContext;
    copyEmail = () => {
        const { translate } = this.context;
        const translations = this.props.translations;
        clipboard.copyText(this.props.user.email || '', translations?.copiedToClipboard ?? translate('copyToClipboard'), translations?.copingToClipboardError ?? translate('copingToClipboardError'));
    };
    render() {
        const { children, info, className, user, avatarInfo, ...restProps } = this.props;
        const { translate } = this.context;
        const translations = this.props.translations;
        const classes = classNames(className, {});
        const userActiveStatusClasses = classNames(styles.userActiveStatus, user.online ? styles.online : '');
        return (_jsx("div", { ...restProps, className: classes, children: _jsxs("div", { className: styles.userInformationContainer, children: [_jsxs("div", { className: styles.userAvatar, children: [_jsx(Avatar, { size: AvatarSize.Size56, url: user.avatarUrl, username: user.name, round: true }), !!avatarInfo && avatarInfo] }), _jsxs("div", { className: styles.userInformation, children: [_jsxs("div", { className: styles.userInformationGeneral, children: [_jsxs("div", { className: styles.userNameLine, children: [user.href && (_jsx(Link, { href: user.href, className: styles.userName, "data-test": "user-card-link", children: user.name })), !user.href && _jsx("span", { className: styles.userName, children: user.name }), typeof user.online === 'boolean' && (_jsx("span", { className: userActiveStatusClasses, title: user.online
                                                    ? (translations?.online ?? translate('online'))
                                                    : (translations?.offline ?? translate('offline')) })), !!info && _jsx("span", { className: styles.userNameInfo, children: info }), user.banned && (_jsx(Tooltip, { title: user.banReason, children: _jsx(Tag, { className: styles.banLabel, children: translations?.banned ?? translate('banned') }) }))] }), _jsx("div", { className: styles.userLogin, children: user.login }), user.email && (_jsxs("span", { className: styles.userEmailWrapper, children: [_jsx(Link, { href: `mailto:${user.email}`, title: `mailto:${user.email}`, target: "_blank", className: styles.userEmail, children: user.email }), user.unverifiedEmail && (_jsx("span", { className: styles.unverifiedLabel, children: translations?.unverified ?? translate('unverified') })), _jsx(Icon, { title: translations?.copyToClipboard ?? translate('copyToClipboard'), className: styles.userCopyIcon, onClick: this.copyEmail, glyph: copyIcon, size: IconSize.Size14, suppressSizeWarning: true })] }))] }), children] })] }) }));
    }
}
