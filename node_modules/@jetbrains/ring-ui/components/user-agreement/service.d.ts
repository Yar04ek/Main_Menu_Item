import { ReactNode } from 'react';
import Storage from '../storage/storage';
import { UserAgreementAttrs, UserAgreementTranslations } from './user-agreement';
export declare const showMessage = "userAgreementShow";
export declare const hideMessage = "userAgreementHide";
export interface Consent {
    accepted?: boolean | null | undefined;
    majorVersion?: number | null | undefined;
    minorVersion?: number | null | undefined;
}
export interface ConsentResponse {
    guest?: boolean | null | undefined;
    endUserAgreementConsent?: Consent | null | undefined;
}
export interface Agreement {
    content: ReactNode;
    enabled?: boolean | null | undefined;
    majorVersion?: number | null | undefined;
    minorVersion?: number | null | undefined;
    requiredForREST?: boolean | null | undefined;
}
export interface UserAgreementServiceTranslations extends UserAgreementTranslations {
    reviewNow: string;
}
export interface UserAgreementServiceConfig {
    getUserAgreement: () => Promise<Agreement | null | undefined> | Agreement | null | undefined;
    getUserConsent: () => Promise<ConsentResponse> | ConsentResponse;
    setUserConsent: () => Promise<Consent> | Consent;
    interval?: number | null | undefined;
    translations?: UserAgreementServiceTranslations | undefined;
    onDialogShow?: (() => void) | null | undefined;
    onDialogHide?: (() => void) | null | undefined;
    onRemindLater?: (() => void) | null | undefined;
    onAccept?: (() => void) | null | undefined;
    onDecline?: (() => void) | null | undefined;
}
export default class UserAgreementService {
    config: UserAgreementServiceConfig;
    constructor(config: UserAgreementServiceConfig);
    private _dialogPromise;
    private _alertPromise;
    tabId: number;
    interval: number;
    container: HTMLDivElement;
    reactRoot: import("react-dom/client").Root;
    storage: Storage;
    checkingPromise: Promise<[Agreement, Consent]> | null;
    guest: boolean | null | undefined;
    userAgreement: Agreement;
    userConsent: Consent;
    intervalId?: number;
    startChecking: () => void;
    stopChecking: () => void;
    onStorageEvent: (event: StorageEvent) => void;
    private _notifyAboutShowing;
    private _notifyAboutHiding;
    getUserAgreement: () => Promise<Agreement>;
    getUserConsent: () => Promise<Consent>;
    checkConsentAndShowDialog: (withoutNotifications?: boolean) => Promise<unknown>;
    checkConsent: () => Promise<boolean | null | undefined>;
    alertKey?: string | number | null;
    showAlert: (withoutNotifications?: boolean) => Promise<unknown>;
    hideAlert: (withoutNotifications?: boolean) => void;
    showDialog: (withoutNotifications?: boolean, preview?: boolean, restOptions?: Partial<UserAgreementAttrs>) => Promise<unknown>;
    hideDialog: (withoutNotifications?: boolean) => void;
    showDialogOrAlert: (withoutNotifications?: boolean, preview?: boolean, restOptions?: Partial<UserAgreementAttrs>) => Promise<unknown>;
    hideDialogAndAlert: (withoutNotifications?: boolean) => void;
    onAccept: () => Promise<void>;
    onDecline: () => void;
}
