import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Component, createContext, forwardRef } from 'react';
import classNames from 'classnames';
import getUID from '../global/get-uid';
import ControlHelp from '../control-help/control-help';
import styles from './radio.css';
export const RadioContext = createContext({});
export class RadioItemInner extends Component {
    uid = getUID('ring-radio-item-');
    input;
    inputRef = (el) => {
        this.input = el;
    };
    label;
    labelRef = (el) => {
        this.label = el;
    };
    render() {
        const { className, children, help, ...restProps } = this.props;
        const classes = classNames(styles.radio, className);
        return (_jsxs("label", { ref: this.labelRef, className: classes, htmlFor: this.uid, children: [_jsx("input", { id: this.uid, ...restProps, ref: this.inputRef, className: styles.input, type: "radio" }), _jsx("span", { className: styles.circle }), _jsxs("span", { className: styles.label, children: [children, help && _jsx(ControlHelp, { children: help })] })] }));
    }
}
const RadioItem = forwardRef(function RadioItem(props, ref) {
    return (_jsx(RadioContext.Consumer, { children: ({ value, onChange, ...restContext }) => (_jsx(RadioItemInner, { ref: ref, ...restContext, checked: value != null ? value === props.value : undefined, onChange: onChange != null ? () => onChange(props.value) : undefined, ...props })) }));
});
export default RadioItem;
